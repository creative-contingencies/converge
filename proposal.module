<?php

/**
 * Implementation of hook_init().
 */
function proposal_init() {

}

/**
 * Implementation of hook_menu().
 */
function proposal_menu() {
  $items = array();
  
  // Review tab
/*  $items['node/%node/reviews'] = array(
    'title' => 'Reviews',
    'page callback' => 'proposal_view_reviews',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'), // FIXME!
  );*/

  
  // Admin page.
  $items['admin/settings/proposal'] = array(
    'title' => 'CCC Proposal Settings',
    'description' => 'Change configuration and email templates for Proposals',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('proposal_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/settings/review'] = array(
    'title' => 'CCC Review Settings',
    'description' => 'Change configuration and email templates for Reviews',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  // Handler for the magic URL to add a user to a proposal.
  // Needs to be hit by an authenticated user.
  $items['manage/proposal/%/%/%/%'] = array(
    'title' => 'Modify a proposal',
    'description' => 'Modify a proposal',
    'page callback' => 'proposal_manage',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/*
function proposal_theme($existing, $type, $theme, $path) {
  return array(
    'reviews_overview' => array(
      'arguments' => array('node' => NULL, 'reviews' => NULL),
      'template' => 'reviews_overview'
    ),
  );

}

function proposal_view_reviews($node) {
  // Get review nodes out of db
  $query = "SELECT nid FROM {content_type_paper_review} WHERE field_paper_nid = %d";
  $result = db_query($query, $node->nid);
  $reviews = array();
  while ( $review = db_fetch_object($result) ) {
    $reviews[$review->nid] = node_load($review->nid);
  }
  return theme('reviews_overview', $node, $reviews);
}
*/

function review_admin_settings() {

  // Reviewer settings.
  $form['reviewer_add_notify'] = array(
    '#type' => 'fieldset',
    '#title' => 'Reviewer Add Notification',
    '#description' => t('Choose whether or not a reviewer is notified when they are assigned to a proposal.'),
  );
  $form['reviewer_add_notify']['review_mail_reviewer_add_notify_send'] = array(
    '#title' => t('Send notification to reviewer'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('review_mail_reviewer_add_notify_send', 1),
  );
  $form['reviewer_add_notify']['review_mail_reviewer_add_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_mail_reviewer_add_notify_subject', ''),
  );
  $form['reviewer_add_notify']['review_mail_reviewer_add_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_mail_reviewer_add_notify_body', ''),
    '#rows' => 16,
  );
  $form['reviewer_add_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !author_firstname, !author_surname, !author_email, !title, !abstract, !proposal_url, !review_url, !site, !site_url, !site_mail'),
  );


  $form['reviewer_remove_notify'] = array(
    '#type' => 'fieldset',
    '#title' => 'Reviewer Remove Notification',
    '#description' => t('Choose whether or not a reviewer is notified when they are removed from a proposal.'),
  );
  $form['reviewer_remove_notify']['review_mail_reviewer_remove_notify_send'] = array(
    '#title' => t('Send notification to reviewer'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('review_mail_reviewer_remove_notify_send', 1),
  );
  $form['reviewer_remove_notify']['review_mail_reviewer_remove_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_mail_reviewer_remove_notify_subject', ''),
  );
  $form['reviewer_remove_notify']['review_mail_reviewer_remove_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_mail_reviewer_remove_notify_body', ''),
    '#rows' => 16,
  );
  $form['reviewer_remove_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !author_firstname, !author_surname, !author_email, !title, !abstract, !proposal_url, !review_url, !site, !site_url, !site_mail'),
  );

  return system_settings_form($form);
  
}

function proposal_admin_settings() {

  // Taxonomy settings.
  $form['proposal_taxonomy'] = array(
    '#type' => 'fieldset',
    '#title' => 'Proposal Vocabularies',
    '#description' => t('Define which vocabularies are used by the proposal content type.'),
  );

  // Grab list of taxonomies, so we can display pull-downs.
  $vocabularies = taxonomy_get_vocabularies('proposal');

  $options = array();
  foreach($vocabularies as $i => $v) {
    $options[$i] = $v->name;
  }

  $form['proposal_taxonomy']['proposal_vocabulary_kind'] = array(
    '#title' => t('Kind'),
    '#description' => t('The vocabulary that contains the <em>kind</em> of proposal.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('proposal_vocabulary_kind', 0),
  );

  $form['proposal_taxonomy']['proposal_vocabulary_category'] = array(
    '#title' => t('Category'),
    '#description' => t('The vocabulary that contains the proposal <em>category</em>.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('proposal_vocabulary_category', 0),
  );

  $form['proposal_taxonomy']['proposal_vocabulary_keywords'] = array(
    '#title' => t('Keywords'),
    '#description' => t('The vocabulary that contains the proposal <em>keywords</em>.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('proposal_vocabulary_keywords', 0),
  );

  $form['proposal_new_user_notify'] = array(
    '#type' => 'fieldset',
    '#title' => 'New User Account Notification',
    '#description' => t('Choose whether or not a user is notified of an account that is created via the proposal submission form.'),
  );
  $form['proposal_new_user_notify']['proposal_mail_proposal_new_user_notify_send'] = array(
    '#title' => t('Send notification to user'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification emails.'),
      t('Send notification emails.')
    ),
    '#default_value' => variable_get('proposal_mail_proposal_new_user_notify_send', 1),
  );
  $form['proposal_new_user_notify']['proposal_mail_proposal_new_user_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('proposal_mail_proposal_new_user_notify_subject', ''),
  );
  $form['proposal_new_user_notify']['proposal_mail_proposal_new_user_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('proposal_mail_proposal_new_user_notify_body', ''),
    '#rows' => 16,
  );
  $form['proposal_new_user_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !username, !email, !password, !login_url, !site, !site_url, !site_mail'),
  );

  // Configure email: new proposal -> user
  $form['proposal_notify_user'] = array(
    '#type' => 'fieldset',
    '#title' => 'New Proposal Confirmation',
    '#description' => t('Choose whether or not a user is sent a confirmation after submitting a proposal.'),
  );
  $form['proposal_notify_user']['proposal_mail_proposal_notify_user_send'] = array(
    '#title' => t('Send confirmation to user'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send confirmation emails.'),
      t('Send confirmation emails.')
    ),
    '#default_value' => variable_get('proposal_mail_proposal_notify_user_send', 1),
  );
  $form['proposal_notify_user']['proposal_mail_proposal_notify_user_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('proposal_mail_proposal_notify_user_subject', ''),
  );
  $form['proposal_notify_user']['proposal_mail_proposal_notify_user_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('proposal_mail_proposal_notify_user_body', ''),
    '#rows' => 16,
  );
  $form['proposal_notify_user']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !username, !email, !firstname, !surname, !organisation, !phone, !address, !city, !state, !postcode, !country, !title, !abstract, !kind, !category, !keywords, !add_url, !login_url, !site, !site_url, !site_mail'),
  );

  // Configure email: new proposal -> admin
  $form['proposal_notify_admin'] = array(
    '#type' => 'fieldset',
    '#title' => 'Site Administrator Notification',
    '#description' => t('Choose whether or not a user is notified of an account that is created via the proposal submission form.'),
  );
  $form['proposal_notify_admin']['proposal_mail_proposal_notify_admin_send'] = array(
    '#title' => t('Send notification to site administrator'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification emails.'),
      t('Send notification emails.')
    ),
    '#default_value' => variable_get('proposal_mail_proposal_notify_admin_send', 1),
  );
  $form['proposal_notify_admin']['proposal_mail_proposal_notify_admin_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('proposal_mail_proposal_notify_admin_subject', ''),
  );
  $form['proposal_notify_admin']['proposal_mail_proposal_notify_admin_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('proposal_mail_proposal_notify_admin_body', ''),
    '#rows' => 16,
  );
  $form['proposal_notify_admin']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !username, !email, !title, !abstract, !add_url, !login_url, !site, !site_url, !site_mail'),
  );

  // Configure email: add presenter via magic url -> submitter
  $form['presenter_add_notify'] = array(
    '#type' => 'fieldset',
    '#title' => ' Presenter Add Notification',
    '#description' => t('Choose whether or not a proposal author is notified when a presenter is added to the proposal.'),
  );
  $form['presenter_add_notify']['proposal_mail_presenter_add_notify_send'] = array(
    '#title' => t('Send notification to proposal author'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('proposal_mail_presenter_add_notify_send', 1),
  );
  $form['presenter_add_notify']['proposal_mail_presenter_add_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('proposal_mail_presenter_add_notify_subject', ''),
  );
  $form['presenter_add_notify']['proposal_mail_presenter_add_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('proposal_mail_presenter_add_notify_body', ''),
    '#rows' => 16,
  );
  $form['presenter_add_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !username, !email, !author, !authoremail, !title, !abstract, !remove_url, !login_url, !site, !site_url, !site_mail'),
  );

  return system_settings_form($form);
}

/*
 * Implementation of hook_form_alter()
 *
 * Insert fields that allow user creation when the form is submitted.
 */
function proposal_form_alter(&$form, $form_state, $form_id) {
  global $user;

  if ($form_id == 'user_login') {
    $form['name']['#title'] = t('Email address');
    $form['name']['#description'] = t('Enter your email address.');

  }

  // Do not display the teaser break check box.
  unset($form['body_field']['teaser_js']);
  unset($form['body_field']['teaser_include']);

  if ($form_id == 'proposal_node_form' && empty($form['#node']->nid) && $user->uid < 1) {
    $form['personal'] = array(
      '#type' => 'fieldset',
      '#title' => t('Your details'),
      '#description' => t('Please enter your contact details. These details will be used to create a login on this site.'),
      '#weight' => -6,
      '#tree' => TRUE,
    );

    $form['personal']['login'] = array(
      '#type' => 'markup',
      '#value' => '<p>Are you an existing user? Please <a href="/user/login?'.drupal_get_destination().'">login</a> first.',
    );

    /* This goes into a user, the rest into a profile */
    $form['personal']['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Your email'),
      '#required' => TRUE,
      '#description' => t('Please your email address. You will use this to login to the site, so please ensure the address is valid'),
    );

    $form['personal']['password'] = array(
      '#type' => 'password',
      '#title' => t('Choose Password'),
      '#required' => TRUE,
      '#description' => t('Please choose a secure password that is not easy to guess. You will use this password to login when you return to this site'),
    );

    $form['personal']['verifypass'] = array(
      '#type' => 'password',
      '#title' => t('Verify Password'),
      '#required' => TRUE,
      '#description' => t('Please re-enter the password for verification'),
    );


    $form['personal']['firstname'] = array(
      '#type' => 'textfield',
      '#title' => t('First Name'),
      '#required' => TRUE,
      '#description' => t(''),
    );

    $form['personal']['surname'] = array(
      '#type' => 'textfield',
      '#title' => t('Surname or Family Name'),
      '#required' => TRUE,
      '#description' => t(''),
    );

    $form['personal']['organisation'] = array(
      '#type' => 'textfield',
      '#title' => t('School, Organisation or Affiliation'),
      '#required' => TRUE,
      '#description' => t(''),
    );

    $form['personal']['phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone'),
      '#required' => TRUE,
      '#description' => t(''),
    );

    $form['personal']['address'] = array(
      '#type' => 'textfield',
      '#title' => t('Address'),
      '#required' => TRUE,
      '#description' => t(''),
    );

    $form['personal']['city'] = array(
      '#type' => 'textfield',
      '#title' => t('Town, City or Suburb'),
      '#required' => TRUE,
      '#description' => t(''),
    );

    $form['personal']['state'] = array(
      '#type' => 'textfield',
      '#title' => t('State, Region or Province'),
      '#required' => FALSE,
      '#description' => t(''),
    );

    $form['personal']['postcode'] = array(
      '#type' => 'textfield',
      '#title' => t('Postcode'),
      '#required' => FALSE,
      '#description' => t(''),
    );

    $form['personal']['country'] = array(
      '#type' => 'textfield',
      '#title' => t('Country'),
      '#required' => TRUE,
      '#description' => t(''),
    );

    $form['personal']['bio'] = array(
      '#type' => 'textarea',
      '#title' => t('Bio'),
      '#required' => TRUE,
      '#description' => t('Please tell us a bit about yourself, such as relevant experience'),
    );

    // Perform some extra validation steps.
    $form['#validate'][] = 'proposal_node_form_validate';

    // Patch in account and profile creation.
    $form['#submit'] = array('proposal_node_form_submit') + $form['#submit'];

    // Redirect to the user dashboard when submission is done.
    $form['#redirect'] = url('user', array('absolute' => TRUE));
  }

  if (empty($form['#node']->nid) && $user->uid > 0 && isset($_SESSION['proposal_node_form_state_values'])) {  
    $values = unserialize($_SESSION['proposal_node_form_state_values']);

    $form['title']['#default_value'] = $values['title'];
    $form['body_field']['body']['#default_value'] = $values['body'];

    foreach($values['taxonomy'] as $taxonomy => $value) {
      $multi_taxonomy_counter = 0;
      if(!is_array($value)) {
        $form['taxonomy'][$taxonomy]['#default_value'] = $value;
      }
      else {
        $tags = array();
        $multi_taxonomy_counter++;
        foreach($value as $key => $val) {
          $tags[] = $val;
        }
        $form['taxonomy'][$taxonomy][$multi_taxonomy_counter]['#default_value'] = implode(', ', $tags);
      }
    }
  }
  
  if ( $form_id == 'proposal_node_form' && isset($_GET['assign_reviewers']) && $_GET['assign_reviewers'] == True ) {
    $js = "
    $(document).ready(function() {
      $('#content .node-form .standard').children().each(function() {
        if ( $(this).attr('id') != 'field-proposal-reviewers-items' ) {
          $(this).hide()
        }
      });
      $('#content .help p').hide();
      $('#edit-preview').hide();
      $('#edit-delete').hide();
    });
    ";
    
    drupal_add_js($js, 'inline');
  }
  else if ( $form_id == 'proposal_node_form' && isset($_GET['change_status']) && $_GET['change_status'] == True ) {
    $js = "
    $(document).ready(function() {
      $('#content .node-form .standard').children().each(function() {
        if ( $(this).attr('id') != 'edit-field-proposal-status-value-wrapper' ) {
          $(this).hide()
        }
      });
      $('#content .help p').hide();
      $('#edit-preview').hide();
      $('#edit-delete').hide();
    });
    ";
    
    drupal_add_js($js, 'inline');
  }


}

/*
 * Implementation of hook_form_validate()
 *
 * Check that the fields inserted by hook_form_alter() contain valid data.
 */
function proposal_node_form_validate($form, &$form_state) {
  // If we have a saved form_state, delete it.
  if(isset($_SESSION['proposal_node_form_state_values'])) {
    unset($_SESSION['proposal_node_form_state_values']);
  }

  // Check password.
  if($form_state['values']['personal']['password'] != $form_state['values']['personal']['verifypass']) {
    form_set_error('personal][password', t('The passwords do not match.'));
    form_set_error('personal][verifypass', '');
    unset($form_state['values']['personal']['password']);
    unset($form_state['values']['personal']['verifypass']);
  }

  // Check email.
  $email_valid = valid_email_address($form_state['values']['personal']['email']);
  if(!empty($form_state['values']['personal']['email']) && !$email_valid) {
    form_set_error('personal][email', t('Please enter a valid email address.'));
  } else if(strpos(strtolower($email), 'edumail.edu.au') !== FALSE) {
    form_set_error('personal][email', t('Please enter a valid email address. Edumail addresses end in .gov.edu.au.'));
  } else {
    // Check if email address is already in use; redirect to login if so.
    $email_exists = db_result(db_query("SELECT COUNT(uid) FROM {users} WHERE mail='%s'", $form_state['values']['personal']['email']));
    if(!empty($form_state['values']['personal']['email']) && $email_exists) {
      form_set_error('personal][email', t('This email address is already in use. Please <a href="/user/login?'.drupal_get_destination().'">login</a> before resubmitting'));
      $_SESSION['proposal_node_form_state_values'] = serialize($form_state['values']);
    }
  }
}

/*
 * Implementation of hook_form_submit()
 *
 * Process the field added by hook_form_alter() and create a user, then log
 * this user in.
 */
 
function proposal_node_form_submit($form, &$form_state) {

  global $user;
  global $language;

  // If we check here, we can never accidentally log the user out.
  if (empty($form['#node']->nid) && $user->uid < 1) {

    /*
     * Create a new user with submitted information.
     */
    $user_attributes = array(
      'name' => $form_state['values']['personal']['email'],
      'pass' => $form_state['values']['personal']['password'],
      'mail' => $form_state['values']['personal']['email'],
      'roles' => array(DRUPAL_AUTHENTICATED_RID),
      'status' => TRUE,
    );
    $new_user = user_save(
      new stdClass(),
      $user_attributes
    );

    /*
     * And create a new profile, which will be associated with this user.
     */
    $profile_attributes = array(
      'nid' => NULL, // NULL creates a new node.
      'title' => $new_user->name .'\'s Profile',
      'body' => NULL, // Defaults to no body.
      'type' => 'profile',
      'teaser' => NULL,
      'log' => '',
      'created' => '',
      'format' => FILTER_FORMAT_DEFAULT,
      'uid' => $new_user->uid,
      'field_profile_firstname' => array(array('value' => $form_state['values']['personal']['firstname'])),
      'field_profile_surname' => array(array('value' => $form_state['values']['personal']['surname'])),
      'field_profile_organisation' => array(array('value' => $form_state['values']['personal']['organisation'])),
      'field_profile_phone' => array(array('value' => $form_state['values']['personal']['phone'])),
      'field_profile_address' => array(array('value' => $form_state['values']['personal']['address'])),
      'field_profile_city' => array(array('value' => $form_state['values']['personal']['city'])),
      'field_profile_state' => array(array('value' => $form_state['values']['personal']['state'])),
      'field_profile_postcode' => array(array('value' => $form_state['values']['personal']['postcode'])),
      'field_profile_country' => array(array('value' => $form_state['values']['personal']['country'])),
      'field_profile_bio' => array( array('value' => $form_state['values']['personal']['bio'])),
    );
    $new_profile = (object) $profile_attributes;
    node_save($new_profile);

    $params = proposal_content_profile_vars('profile', $new_user->uid);

    // Send an email to the user and tell them about the new account.
    if (variable_get('proposal_mail_proposal_new_user_notify_send', 1)) {
      $params['!username'] = $new_user->name;
      $params['!email'] = $new_user->mail;
      $params['!password'] = $form_state['values']['personal']['password'];

      // Prepare and send e-mail.
      drupal_mail('proposal', 'new_user_notify', $new_user->mail, $language, $params);
      drupal_set_message(t('An e-mail with your login details has been sent to !email.'), array('!email' => $new_user->mail));
    }

    // Set the new user as owner of this proposal.
    $form_state['values']['uid'] = $new_user->uid;

    // Add the new user as presenters[0] in this proposal.
    $form_state['values']['field_proposal_presenters'][0]['uid'] = $new_user->uid;

    // And login as the new user.
    $user = $new_user; 
  } // endif uid
}

// Dodgy second nodeapi since I've put reviews with proposals
// hmm, this function is very poorly written, but it's finally working...
function review_nodeapi(&$node, $op, $a1) {
  global $user;
  switch($op) {
    case 'prepare':
      if ( arg(0) == 'node' && !($node->nid > 0) && $node->type == 'paper_review' && !isset($_GET['nid']) ) {
        // no id set... take them back...
        drupal_set_message("You must use the Reviewers menu too review an item.");
        drupal_goto();
      }
      if ( !($node->nid > 0) && $node->type == 'paper_review' && isset($_GET['nid']) && is_numeric($_GET['nid']) ) {
        // Check to see if a user has already reviewed this 
        $query = "SELECT nid FROM {node} WHERE type='paper_review' AND uid = %s";
        $result = db_query($query, $user->uid);
        while ( $n = db_fetch_object($result) ) {
          $review_node = node_load($n->nid);
          if ( $review_node->field_paper[0]['nid'] == $_GET['nid'] ) {
            drupal_set_message("You have already reviewed this proposal. You may edit and update your review below.");
            drupal_goto('node/' . $review_node->nid . '/edit');
          }
        }
        $proposal_node = node_load($_GET['nid']);
        $assigned = true;
        foreach ( $proposal_node->field_proposal_reviewers as $u ) {
          if ( is_numeric($u['uid']) ) {
            $assigned = false;
          }
          if ( $u['uid'] == $user->uid ) {
            $assigned = true;
            break;
          }
        }
        if ( !$assigned ) {
          drupal_set_message("You are not assigned to review this proposal.");
          drupal_goto();
        }
      }
      
      $js = "
      $(document).ready(function() {
        $('#edit-field-paper-0-nid-nid-wrapper').hide();
        $('#content .title').text('Reviewing " . $proposal_node->title . "');
      });
      ";
      
      drupal_add_js($js, 'inline');
      break;
    case 'presave':     
      if ( $node->type == 'paper_review' && arg(2) != 'edit' ) {
        // Check to see if a user has already reviewed this 
        $query = "SELECT nid FROM {node} WHERE type='paper_review' AND uid = %s";
        $result = db_query($query, $user->uid);
        while ( $n = db_fetch_object($result) ) {
          $review_node = node_load($n->nid);
          if ( $review_node->field_paper[0]['nid'] == $node->field_paper[0]['nid'] ) {
            drupal_set_message("You have already reviewed this proposal. You may edit and update your review below.");
            drupal_goto('node/' . $review_node->nid . '/edit');
          }
        }
        $proposal_node = node_load($node->field_paper[0]['nid']);
        $assigned = true;
        foreach ( $proposal_node->field_proposal_reviewers as $u ) {
          if ( is_numeric($u['uid']) ) {
            $assigned = false;
          }
          if ( $u['uid'] == $user->uid ) {
            $assigned = true;
            break;
          }
        }
        if ( !$assigned ) {
          drupal_set_message("You are not assigned to review this proposal.");
          drupal_goto();
        }
      }
  }
}

/**
 * Implementation of hook_nodeapi().
 * Send emails when new proposals are created.
 */
function proposal_nodeapi(&$node, $op, $a1) {
  if($node->type == 'paper_review') {
    review_nodeapi($node, $op, $a1);
  }

  if($node->type != 'proposal')
    return;

  global $user;
  global $transpose_author;
  global $language;

  // If the node is created by the admin user via the transpose handler, the $user is wrong.
  // This allows us to set an override in transpose.module. It's ugly, but it works.
  if($transpose_author) {
    $author = $transpose_author;
  } else {
    $author = $user;
  }

  // Munge the user profile into the params array (win!)
  $params = proposal_content_profile_vars('profile', $author->uid);

  switch ($op) {
    case 'view':
      // Check to see if there are reviewers. If there are, hide the presenters.
      $reviewers = false;
      foreach ( $node->field_proposal_reviewers as $reviewer ) {
        if ( $reviewer['uid'] > 0 ) {
          $reviewers = true;
          break;
        }
      }
      if ( $reviewers ) {
        unset($node->field_proposal_presenters);
      }
    break;
    case 'insert':
      // Give the new node a uuid, if there isn't one yet.
      if(empty($node->uuid))
        $node->uuid = uuid_uuid();

      // Prepare and send e-mail to user.
      $params['!username'] = $author->name;
      $params['!email'] = $author->mail;

      $params['!url'] = url('node/' . $node->nid, array('absolute' => TRUE, 'alias' => TRUE));
      $params['!url-alias'] = url('node/' . $node->nid, array('absolute' => TRUE));
      $params['!title'] = $node->title;
      $params['!abstract'] = $node->body;

      // Grab the taxonomies too.
      $terms = taxonomy_node_get_terms_by_vocabulary($node, variable_get('proposal_vocabulary_kind', 0));
      foreach($terms as $tid => $term) {
        $kind[] = $term->name;
      }
      $params['!kind'] = implode(', ', $kind);

      $terms = taxonomy_node_get_terms_by_vocabulary($node, variable_get('proposal_vocabulary_category', 0));
      foreach($terms as $tid => $term) {
        $category[] = $term->name;
      }
      $params['!category'] = implode(', ', $category);

      $terms = taxonomy_node_get_terms_by_vocabulary($node, variable_get('proposal_vocabulary_keywords', 0));
      foreach($terms as $tid => $term) {
        $keywords[] = $term->name;
      }
      $params['!keywords'] = implode(', ', $keywords);

      // Magic URL any registered user can hit to be added as a presenter.
      $params['!add_url'] = url('manage/proposal/add/' . $node->nid . '/' . $node->uuid . '/0', array('absolute' => TRUE));

      if (variable_get('proposal_mail_proposal_notify_user_send', 0)) {
        drupal_mail('proposal', 'notify_user', $author->mail, $language, $params);
        drupal_set_message(t('A confirmation e-mail with the proposal details has been sent to @email.', array('@email' => $author->mail)));
      }
      if (variable_get('proposal_mail_proposal_notify_admin_send', 0)) {
        // drupal_mail('proposal', 'notify_admin', variable_get('site_mail'), $language, $params);
        drupal_mail('proposal', 'notify_admin', 'me@cafuego.net', $language, $params);
      }
      break;
    case 'presave':
      // clear the "munged" params
      $params = array();
      //!reviewer_firstname, !reviewer_surname, !reviewer_email, !author_firstname, !author_surname, !author_email, !title, !abstract, !proposal_url, !review_url, !site, !site_url, !site_mail'
      
      $author = content_profile_load('profile', $node->uid);
      $author_user = user_load(array('uid' => $node->uid));
      $params['!author_firstname'] = $author->field_profile_firstname[0]['value'];
      $params['!author_surname'] = $author->field_profile_surname[0]['value'];
      $params['!author_email'] = $author_user->mail;
      $params['!title'] = $node->title;
      $params['!abstract'] = $node->body;
      $params['!proposal_url'] = url('node/' . $node->nid, array('absolute' => true));
      $params['!review_url'] = url('node/add/paper-review', array('absolute' => true, 'query' => array('nid' => $node->nid)));
      
      // Load in the already existing reviewers
      $new_reviewers = $node->field_proposal_reviewers;
      if ( $node->nid ) {
        $old_node = node_load($node->nid);
        $old_reviewers = $old_node->field_proposal_reviewers;
        for ( $i = 0; $i < count($old_reviewers); $i++) {
          for ( $j = 0; $j < count($new_reviewers); $j++) {
            if ( $old_node->field_proposal_reviewers[$i]['uid'] == $new_reviewers[$j]['uid'] ) {
              // no change. person was there before and is there now
              unset($old_reviewers[$i], $new_reviewers[$j]);
            }
          }
        }
        // loop through the remaining old reviewers who have not been kept on and email them about being removed
        if (variable_get('review_mail_reviewer_remove_notify_send', 0)) {
          foreach ( $old_reviewers as $reviewer ) {
            if ( $reviewer['uid'] > 0 ) {
              $reviewer_profile = content_profile_load('profile', $reviewer['uid']);
              $reviewer_user = user_load(array('uid' => $reviewer['uid']));
              $params['!reviewer_firstname'] = $reviewer_profile->field_profile_firstname[0]['value'];
              $params['!reviewer_surname'] = $reviewer_profile->field_profile_surname[0]['value'];
              $params['!reviewer_email'] = $reviewer_user->mail;
              drupal_mail('proposal', 'reviewer_remove_notify', $reviewer_user->mail, $language, $params);
              drupal_set_message(t('A notification of removal from reviewing has been sent to ' . $reviewer_user->mail . '.'));
            }
          }
        }
      }
      // email new reviewers
      if (variable_get('review_mail_reviewer_add_notify_send', 0)) {
        foreach ( $new_reviewers as $index => $reviewer ) {
          if ( $reviewer['uid'] > 0 ) {
            $reviewer_profile = content_profile_load('profile', $reviewer['uid']);
            $reviewer_user = user_load(array('uid' => $reviewer['uid']));
            $params['!reviewer_firstname'] = $reviewer_profile->field_profile_firstname[0]['value'];
            $params['!reviewer_surname'] = $reviewer_profile->field_profile_surname[0]['value'];
            $params['!reviewer_email'] = $reviewer_user->mail;
            drupal_mail('proposal', 'reviewer_add_notify', $reviewer_user->mail, $language, $params);
            drupal_set_message(t('An invite to review has been sent to ' . $reviewer_user->mail . '.'));
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_mail().
 */
function proposal_mail($key, &$message, $params) {

  if(empty($params['!login_url']))
     $params['!login_url'] = url('user', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!edit_url']))
     $params['!edit_url'] = url('user-profile', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site_url']))
     $params['!site_url'] = url('<front>', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site']))
     $params['!site'] = variable_get('site_name', '');
  $params['!site_name'] = $params['!site'];
  if(empty($params['!site_mail']))
     $params['!site_mail'] = variable_get('site_mail', '');

  switch ($key) {
    case 'new_user_notify':
      $message['subject'] = strtr(variable_get('proposal_mail_proposal_new_user_notify_subject'), $params);
      $message['body'][] = strtr(variable_get('proposal_mail_proposal_new_user_notify_body'), $params);
      break;
    case 'notify_user':
      $message['subject'] = strtr(variable_get('proposal_mail_proposal_notify_user_subject'), $params);
      $message['body'][] = strtr(variable_get('proposal_mail_proposal_notify_user_body'), $params);
      break;
    case 'notify_admin':
      $message['subject'] = strtr(variable_get('proposal_mail_proposal_notify_admin_subject'), $params);
      $message['body'][] = strtr(variable_get('proposal_mail_proposal_notify_admin_body'), $params);
      break;
    case 'presenter_add_notify':
      $message['subject'] = strtr(variable_get('proposal_mail_presenter_add_notify_subject'), $params);
      $message['body'][] = strtr(variable_get('proposal_mail_presenter_add_notify_body'), $params);
      break;
    case 'reviewer_add_notify':
      $message['subject'] = strtr(variable_get('review_mail_reviewer_add_notify_subject'), $params);
      $message['body'][] = strtr(variable_get('review_mail_reviewer_add_notify_body'), $params);
      break;
    case 'reviewer_remove_notify':
      $message['subject'] = strtr(variable_get('review_mail_reviewer_remove_notify_subject'), $params);
      $message['body'][] = strtr(variable_get('review_mail_reviewer_remove_notify_body'), $params);
      break;
    default:
      $message['subject'] = strtr(variable_get('proposal_mail_'. $key .'_subject'), $params);
      $message['body'][] = strtr(variable_get('proposal_mail_'. $key .'_body'), $params);
  }
}

/**
 * Add the current user as a presenter on this proposal.
 */
function proposal_manage($op, $pid, $uuid, $vuid) {

  global $user;

  $user_is_presenter = FALSE;
  $proposal_is_mine = FALSE;

  if(!in_array('authenticated user', $user->roles)) {
    print drupal_get_form('user_login');
  }

  $proposal = node_load($pid);
  $victim = user_load($vuid);

  // Don't bother if we're removing the guest user.

  // Check that the UUID matches.
  if(!$proposal || $proposal->uuid != $uuid) {
    // Not a valid proposal or UUID. Fuckoff.
    drupal_set_message('The link you clicked is invalid.', 'error');
    drupal_goto('<front>');
    return;
  }

  // Is the calling user the submitter?
  if($proposal->uid == $user->uid) {
    $proposal_is_mine = TRUE;
  }

  // Check if $user is already on the list.
  foreach($proposal->field_proposal_presenters as $p) {
    if($p['uid'] == $user->uid) {
      $user_is_presenter = TRUE;
    }
    if($p['uid'] == $victim->uid) {
      $victim_is_presenter = TRUE;
    }
  }

  // We have a valid proposal and we know what to do. Do it.
  switch($op) {
    case 'add':
      if($user_is_presenter) {
        drupal_set_message('You are already a presenter for "' . $proposal->title . '"', 'warning');
      } else {  // if user is not a presenter
        $author = user_load($proposal->uid);
        $proposal->field_proposal_presenters[] = array('uid' => $user->uid);
        node_save($proposal);

        if(variable_get('presenter_add_notify_send', 1 )) {
          $params['!username'] = $user->name;
          $params['!email'] = $user->mail;
          $params['!title'] = $proposal->title;
          $params['!author'] = $author->name;
          $params['!authoremail'] = $author->mail;
          $params['!remove_url'] = url('manage/proposal/remove/' . $proposal->nid . '/' . $proposal->uuid . '/' . $user->uid, array('absolute' => TRUE, 'alias' => TRUE));

          // Prepare and send e-mail.
          drupal_mail('proposal', 'presenter_add_notify', $author->mail, $language, $params);
          drupal_set_message(t('A notification email has been sent to ' . $author->mail . '.'));
        }

        drupal_set_message(t('You were added as a presenter to "' . $proposal->title . '"'));
      }
      break;

    case 'remove':
      if($proposal_is_mine) {
        if($user->uid == $victim->uid) {
          drupal_set_message(t('You are the submitter of this proposal and you cannot be removed'), 'error');
        } else {
          if($victim_is_presenter) {
            for($i = 0; $i < count($proposal->field_proposal_presenters); $i++) {
              if($proposal->field_proposal_presenters[$i]['uid'] == $victim->uid) {
                unset($proposal->field_proposal_presenters[$i]);
              }
            }
            node_save($proposal);
            drupal_set_message($victim->name . ' was removed as presenter for "' . $proposal->title .'"', 'error');
          } else {  // if user is not presenter
            drupal_set_message($victim->name . ' is not a listed presenter for "' . $proposal->title .'"', 'error');
          }
        }
      } else {  // if proposal is not mine
        drupal_set_message('You are not the submitter of "' . $proposal->title .'", so you cannot remove co-presenters.', 'error');
      }
      break;

    default:
      drupal_set_message('I have no idea what to do, sorry. Please use the contact page and let us know what happened.', 'error');
      break;
  }

  drupal_goto('user');
  return;
}

/**
 * Helper to turn content_profile fields into subst vars.
 */
function proposal_content_profile_vars($type, $uid) {
  $params = array();

  $pattern = '/^field_' . $type . '_(?<name>.*)$/';

  $profile = content_profile_load($type, $uid);

  if(!$profile)
    $profile = content_profile_load($type, 0);

  foreach($profile as $key => $val) {
    $r = preg_match($pattern, $key, $matches);
    if($r && !empty($matches['name']))
      $params['!' . $matches['name']] = $val[0]['value'];
  }
  return $params;
}

# vim: set ft=php
