<?php

/**
 *
 * Handle registration info
 *
 * We are coupling a bit with uc_order. Using it's permission and
 * with an expectation that this module is installed.
 *
 * 'view all orders' is a placeholder admin
 * 'view own orders' is I've bought the tickets.
 */

// Ugly-arse hack.
define('DINNER_TICKET_NID', 118);

/**
 * Implementation of hook_nodeapi()
 */
function register_nodeapi(&$node, $op) {
  if($node->type == 'timeslot' && $op == 'load') {
    $dateparts = split(' ', $node->title);
    $node->between = t('!start - !end', array('!start' => $dateparts[4], '!end' => $dateparts[6]));
  }
}

/**
 * Implementation of hook_menu().
 */
function register_menu() {
  $items = array();

  $items['admin/settings/register'] = array(
    'title' => 'CCC Registration Settings',
    'description' => 'Change configuration settings for Registration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('register_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/reports/custom/attendees'] = array(
    'title' => 'Attendee Registration Report',
    'description' => 'List all known attendees.',
    'page callback' => 'register_list_attendees',
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
  );


  $items['admin/store/reports/custom/presenters'] = array(
    'title' => 'Presenter Registration Report',
    'description' => 'List the registration status for presenters with accepted proposals.',
    'page callback' => 'register_list_presenter_payment_status',
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/reports/custom/coupons'] = array(
    'title' => 'Coupon usage list with names',
    'description' => 'List coupon usage',
    'page callback' => 'register_list_coupon_status',
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/reports/custom/overview'] = array(
    'title' => 'Registration Overview Report',
    'description' => 'List an overview of registration info.',
    'page callback' => 'register_list_overview',
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/reports/custom/overview/%'] = array(
    'title' => 'Registration Report of Orders by Ticket',
    'description' => 'List which orders included a specific ticket type.',
    'page callback' => 'register_list_order_by_ticket',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/store/reports/custom/badges'] = array(
    'title' => 'View Badge Data',
    'description' => 'View badge data.',
    'page callback' => 'register_export_badges',
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/reports/custom/badges/csv'] = array(
    'title' => 'Export Badges as CSV',
    'description' => 'Export badge data in CSV format.',
    'page callback' => 'register_export_badges_csv',
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/store/reports/custom/dinner'] = array(
    'title' => 'Dinner Registration Report',
    'description' => 'List an overview of dinner registrations.',
    'page callback' => 'register_list_dinner',
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/tickets'] = array(
    'title' => 'Tickets',
    'description' => 'Conference ticket allocation',
    'page callback' => 'register_tickets',
    'page arguments' => array(1, 3),
    'access callback' => 'user_access',
    'access arguments' => array('view own orders'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['my-profile'] = array(
    'title' => 'My Profile',
    'page callback' => 'user_profile_goto',
    'access callback' => 'user_access',
    'access arguments' => array('edit own profile content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['user-profile'] = array(
    'title' => 'Edit profile redirect',
    'page callback' => 'user_profile_redirect',
    'access callback' => 'user_access',
    'access arguments' => array('view own orders'),
    'type' => MENU_CALLBACK,
  );
  $items['register-thank-you'] = array(
    'title' => 'Thank you',
    'page callback' => 'register_thankyou',
    'access callback' => 'user_access',
    'access arguments' => array('view own orders'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/user/user/prizedraw'] = array(
    'title' => 'Prize Draw!',
    'description' => 'Select 10 random registrants for the prize draw.',
    'page callback' => 'register_prizedraw',
    'access callback' => 'user_access',
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['register/invite_volunteers'] = array(
    'title' => 'Invite volunteers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('register_volunteer_csv'),
    'access arguments' => array('send authors their status'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function register_admin_settings() {
  $form = array();
  $form['register_profile_blurb']['register_profile_nonreg_blurb'] = array(
    '#title' => 'Profile Blurb',
    '#description' => 'The text to show on a user profile when a user has not yet registered.',
    '#type' => 'textarea',
    '#default_value' => variable_get('register_profile_nonreg_blurb', '<p>You are not registered. !register.</p>'),
  );
  $form['register_profile_blurb']['register_no_allocations_blurb'] = array(
    '#title' => 'Allocations Blurb',
    '#description' => 'The text to show on the ticket allocations tab when a user has no tickets allocated to themselves.',
    '#type' => 'textarea',
    '#default_value' => variable_get('register_no_allocations_blurb', '<p>No tickets have been allocated to you. !register.</p>'),
  );
  $form['register_profile_blurb']['vars'] = array(
    '#type' => 'markup',
    '#value' => 'Available subsitution variables are !register, !fullconf, !tuesday, !wednesday, !thursday, !friday, dinner, !leadership',
  );

  // What does the 'Continue shopping' button say?
  $form['register_continue_shopping']['register_continue_shopping'] = array(
    '#title' => 'Continue Shopping',
    '#description' => 'The label to display on the Continue shopping button on a product page.',
    '#type' => 'textfield',
    '#default_value' => variable_get('register_continue_shopping', 'Continue shopping'),
  );

  // Get a list of newsletter tid/names.
  //
  $options = array(0 => 'None');
  $terms = taxonomy_get_tree(variable_get('simplenews_vid', ''));
  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
  }

  // Sign a user up to the newsletter?
  //
  $form['register_newsletter_tid'] = array(
    '#title' => 'Newsletter',
    '#description' => 'Select a newsletter that all new users should be automatically subscribed to.',
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('register_newsletter_tid', 0),
  );
  if (!module_exists('simplenews')) {
    $form['register_newsletter_tid']['#description'] = 'The simplenews module is not installed.';
    $form['register_newsletter_tid']['#active'] = FALSE;
  }

  // Volunteer invitations.
  $form['volunteer_invitation'] = array(
    '#type' => 'fieldset',
    '#title' => 'Volunteer Notifications',
    '#description' => t('Configure the notification email that is sent to volunteers. Note, they will also receive an email with new account details.'),
  );
  $form['volunteer_invitation']['register_mail_volunteer_invite'] = array(
    '#title' => 'Send Mail',
    '#description' => t('Should the volunteer import send notifications emails in addition to the automatic new account email?.'),
    '#type' => 'radios',
    '#options' => array(
      0 => 'Do not send notifications emails.',
      1 => 'Send notifications emails.',
    ),
    '#default_value' => variable_get('register_mail_volunteer_invite', 0),
  );
  $form['volunteer_invitation']['register_mail_volunteer_invite_subject'] = array(
    '#title' => 'Subject',
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('register_mail_volunteer_invite_subject', ''),
  );
  $form['volunteer_invitation']['register_mail_volunteer_invite_body'] = array(
    '#title' => 'Body',
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('register_mail_volunteer_invite_body', ''),
    '#rows' => 12,
  );
  $form['volunteer_invitation']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !volunteer_firstname, !volunteer_surname, !volunteer_email, !site, !site_url, !site_mail'),
  );


  return system_settings_form($form);
}

function user_profile_goto() {
  global $user;
  if ($user->uid) {
    drupal_goto('user/' . $user->uid . '/edit/profile' );
  }
  else {
    return drupal_access_denied();
  }
}

function user_profile_redirect($path1, $path2) {
  global $user;
  if ($user->uid) {
    drupal_goto('user/' . $user->uid . '/' . $path1 . '/' . $path2 );
  }
  else {
    return drupal_access_denied();
  }
}

/**
 * Implementation of hook_theme().
 */
function register_theme() {
  return array(
    'user_overview_registrations' => array(
      'arguments' => array('account' => NULL, $orders => NULL),
    ),
    'register_allocations_form_table' => array(
      'arguments' => array('element' => NULL),
    ),
    'register_badges' => array(
      'arguments' => array('header' => NULL, 'data' => NULL, 'separator' => ',', 'quote' => '"', 'mime' => 'text/csv; charset=utf-8', 'filename' => 'export.csv'),
    ),
  );

}

/**
 * Implementation of hook_form_alter()
 */
function register_form_alter(&$form, $form_state, $form_id) {
  if($form_id == 'uc_order_view_update_form') {
    $form['order_assignee_listing'] = array(
      '#type' => 'fieldset',
      '#title' => 'Ticket assignments for this order',
      '#description' => 'List all users who have been assigned tickets from this order.',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['order_assignee_listing']['info'] = register_list_ticket_assignees($form['order_id']['#value']);
  }
}

/**
 * Helper that lists ticket assignees for a specific order id.
 * This order may contain multiple products, each with multiple assignees.
 */
function register_list_ticket_assignees($order_id) {
  $form = array();

  $order = uc_order_load($order_id);
  foreach($order->products as $product) {
    $form['order_product_' . $product->order_product_id] = array(
      '#type' => 'fieldset',
      '#title' => 'ID ' . $product->order_product_id . ' ' . $product->title,
      '#collapsible' => FALSE,
    );

    $data = array();
    $titles = array('First name', 'Surname', 'Position', 'Organisation', 'Email');
    $assignees = register_get_ticketholders($product);
    foreach($assignees as $assignee) {
      $profile = content_profile_load('profile', $assignee->uid);
      $data[] = array(
        $profile->field_profile_firstname[0]['value'],
        $profile->field_profile_surname[0]['value'],
        $profile->field_profile_position[0]['value'],
        $profile->field_profile_organisation[0]['value'],
        l($assignee->mail, 'user/' . $assignee->uid),
      );
    }

    $form['order_product_' . $product->order_product_id]['assignees'] = array(
      '#type' => 'markup',
      '#value' => theme('table', $titles, $data)
    );
  }
  return $form;
}

/**
 * Implementation of hook_user().
 */
function register_user($op, &$edit, &$account, $category = NULL) {
  global $user;
  switch ($op) {
    case 'view':
      if($user->uid && (($user->uid == $account->uid && user_access('view own orders')) || user_access('view all orders'))) {

        // Get a big list of event purchases and stuff.
        $orders = register_get_orders($account->uid);

        foreach ($orders as $key => $order) {
          // If this order is not valid; ie: cancelled or somesuch, remove the allocations under the
          // order_product_ids associated with this order.
          //
          if (!in_array($order->order_status, sessions_valid_order())) {
            db_query("DELETE FROM {ccc_ticket_allocation} WHERE order_product_id = %d", $order->order_product_id);
            continue;
          }

          if (!$order->some_user_allocated && $order->qty == 1) {
            // No-one is allocated to this ticket, we could allocate them here.
            if (register_allocate_ticket($order->order_product_id, $account->uid)) {
              $order->tickets[$account->uid] = $account;
            }
          }
          // Other useful links:
          $order->manage_path = 'user/' . $account->uid . '/tickets/' . $order->order_product_id;
          // Assign modified data back to the array.
          $orders[$key] = $order;
        }

        $account->content['registrations'] = array(
          '#type' => 'user_profile_category',
          '#weight' => -6,
          '#title' => t('Conference registration'),
          'link' => array(
            '#type' => 'user_profile_item',
            '#value' => theme('user_overview_registrations', $account, $orders),
          ),
        );
      }

    case 'load':
      $orders = register_get_orders($account->uid);
      if ($orders) {
        $account->orders = $orders;
      }
      break;

    // This needs to only be active if the attendee role is required. It will
    // be magically set or disabled at login.
    //
    case 'login':
      register_toggle_attendee_role($account);
      break;

    case 'delete':
      drupal_set_message(t('The user\'s ticket allocations have been deleted'));
      db_query("DELETE FROM {ccc_ticket_allocation} WHERE uid=%d", $account->uid);
      break;
  }
}


function register_toggle_attendee_role(&$account) {

  // Check for allocated tickets.
  //
  $ticket = db_result(db_query("SELECT COUNT(ta.order_product_id) FROM {ccc_ticket_allocation} AS ta
    JOIN {uc_order_products} AS op ON (ta.order_product_id = op.order_product_id)
    JOIN {uc_orders} AS o ON (op.order_id = o.order_id)
    WHERE o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')
    AND ta.uid=%d", $account->uid));

  // Attendee rid.
  //
  $rid = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", 'attendee'));

  // Silently fail if no attendee role exists.
  //
  if (!$rid)
    return;

  // Work on a copy.
  //
  $victim = $account;

  // If a ticket is allocated to user but attendee role is NOT set ... add it.
  // If user has no ticket allocation but DOES have the attendee role set ... remove it.
  //
  if (($ticket || in_array('sponsor', $victim->roles) || in_array('volunteer', $victim->roles)) && !in_array('attendee', $victim->roles)) {
    $roles = $victim->roles + array($rid => 'attendee');
    user_save($victim, array('roles' => $roles));
  }
  else if (!$ticket && in_array('attendee', $victim->roles)) {
    $roles = array_diff($victim->roles, array($rid => 'attendee'));
    user_save($victim, array('roles' => $roles));
  }

  // Overwrite the parameter account with the new details.
  //
  $account = $victim;
}

/**
 * This is the bit of information on the /user/% page.
 */
function theme_user_overview_registrations($account, $orders) {
  $output = '';
  foreach ($orders AS $order) {
    $info = array();
    $title = check_plain($order->title);
    if ($order->this_user_purchased) {
      // User bought this ticket.
      $info['status'] = 'The status of your order is \'' . $order->order_status . '\'.';
      if ($order->order_status == 'pending') {
        $info['status'] .= ' Your status will be confirmed after payment has been processed.';
      }
      if ($order->this_user_allocated && $order->qty == 1) {
        $info['attendees'] = '<p>Your ticket is allocated to you. ';
      }
      else {
        $info['attendees'] = count($order->ticket_links) ? t('<p>Current attendees are <ol><li>') . implode('<li>', $order->ticket_links) . '</ol>' : t('<p>No tickets have been allocated.');
      }
      $info['manage'] = t('Click here to ') . l(t('change ticket allocations'), $order->manage_path) . '.';
    }
    elseif ($order->this_user_allocated) {
      // User is just allocated to a ticket.
      $purchaser = user_load(array('uid' => $order->uid));
      $info['status'] = t('<p>Your ticket has been purchased by ') . l($purchaser->name, 'user/' . $purchaser->uid) . '. ' . t('<p>The status of the order is') . ' \'' . $order->order_status . '\'. ';
      if ($order->order_status == 'pending') {
        $info['status'] .= ' Your status will be confirmed after payment has been processed.';
      }
    }
    $output .= '<h4>' . $title . '</h4><p>' . implode(' ', $info) . '</p>';
  }
  if (!$output) {
    $params = array();
    $params['!register'] = l('Buy a ticket', 'register');
    $params['!fullconf'] = l('full conference', 'fullconf');
    $params['!tuesday'] = l('Tuesday', 'tuesday');
    $params['!wednesday'] = l('Wednesday', 'wednesday');
    $params['!thursday'] = l('Thursday', 'thursday');
    $params['!friday'] = l('Friday', 'friday');
    $params['!dinner'] = l('conference dinner', 'dinner');
    $params['!leadership'] = l('leadership forum', 'leadership');

    $output = strtr(variable_get('register_profile_nonreg_blurb', ''), $params);
  }

  return $output;
}

/**
 * Get all orders that the user purchased and the ticket allocation
 * information.
 */
function register_get_orders($uid) {
  // Orders purchased by this user.
  $sql = "
    SELECT uco.order_id, uco.uid, uco.order_status, uco.created, ucop.order_product_id, ucop.nid, ucop.qty, n.title, n.status, n.type
    FROM {uc_orders} uco
    INNER JOIN {uc_order_products} ucop
    ON uco.order_id = ucop.order_id
    INNER JOIN {node} n
    ON n.nid = ucop.nid
    LEFT JOIN {ccc_ticket_allocation} cccta
    ON ucop.order_product_id = cccta.order_product_id
    WHERE (uco.uid = %d OR cccta.uid = %d)
    AND uco.order_status IN ('pending', 'completed', 'payment_received', 'processing')
    AND ucop.nid IN ( " . implode(', ' , register_ticketable_products()) . " )";
  $results = db_query($sql, $uid, $uid); 
  $orders = array();
  while ($row = db_fetch_object($results)) {
    $key = $row->order_id . '.' . $row->order_product_id;
    if (!isset($orders[$key])) {
      $ticket_links = array();
      $ticketholders = register_get_ticketholders($row);
      // Determine some logic flags.
      $row->this_user_allocated = FALSE;
      $row->some_user_allocated = FALSE;
      foreach ($ticketholders AS $ticket) {
        $row->some_user_allocated = TRUE;
        if ($ticket->uid == $uid) {
          $row->this_user_allocated = TRUE;
        }
        // It seems there is not enough ram to display these allocations via theme('username')
        $ticket_links[] = l($ticket->name, 'user/' . $ticket->uid);
      }
      // Can the user reallocate tickets?
      if ($row->uid == $uid) {
        $row->this_user_purchased = TRUE;
        $row->manage_path = 'user/' . $uid . '/tickets/' . $order->order_product_id;
      }
      else {
        $row->manage_path = FALSE;
        $row->this_user_purchased = FALSE;
      }
      // Build the data up for returning.
      $orders[$key] = $row;
      $orders[$key]->tickets = $ticketholders;
      $orders[$key]->ticket_links = $ticket_links;
    }
  }

  return $orders;
}

/**
 * Return a list of users who are allocated tickets on an order.
 * 
 * $order_product
 *   Object that contains ->order_product_id and ->qty and ->uid (purchaser)
 */
function register_get_ticketholders($order_product) {
  $result = db_query("
    SELECT u.uid, u.name, u.mail, u.status, cccta.order_product_id, n.title
    FROM {ccc_ticket_allocation} cccta
    INNER JOIN {users} u
    ON cccta.uid = u.uid
    LEFT JOIN node n
    ON n.uid = cccta.uid AND n.type='profile'
    WHERE cccta.order_product_id = %d
    ", $order_product->order_product_id);
  $ticketholders = array();
  while ($row = db_fetch_object($result)) {
    if ($row->uid) {
      if (!$row->title) {
        // Use the user account name if no profile found.
        $row->title = $row->name;
      }
      $ticketholders[$row->uid] = $row;
    }
  }
  return $ticketholders;
}


/**
 * Display the ticket allocation form
 *
 * TODO: needs a t() cleanup and better for theming?
 */
function register_tickets($user, $order_product_id) {
  return drupal_get_form('register_tickets_form', $user, $order_product_id);
}

function register_tickets_form(&$form_state, $user, $order_product_id = FALSE) {

  $orders = register_get_orders($user->uid);

  $form = array();
  $form['items'] = array('#tree' => TRUE);

  foreach($orders AS $key => $order) {
    $form['items'][$key] = array();
    $form['items'][$key] = array(
      '#type' => 'fieldset',
      '#title' => check_plain($order->title),
      '#collapsible' => TRUE,
      '#collapsed' => ($order_product_id && $order_product_id != $order->order_product_id) ? TRUE : FALSE,
    );
    // $form[$key]['title']['#value'] = '<h2>' . check_plain($order->title) . '</h2>';
    $form['items'][$key]['status']['#value'] = '<p><strong>Order ID:</strong> ' . $order->order_id . '. Status: ' . $order->order_status . '</p>';
    $form['items'][$key]['tickets']['#value'] = '<p><strong>Number of tickets:</strong> ' . $order->qty . '</p>';
    if (!variable_get('ccc_register_allow_prepay_allocation', TRUE) && $order->order_status != 'completed') {
      $form['items'][$key]['warning']['#value'] = '<p class="error">You may not allocate tickets until the order is completed.</p>';      
    }
    else {
      $exist_order_id = register_check_user_allocated_nid($order->nid, $user->uid);
      if ($exist_order_id == $order->order_id) {
        $exist_order_id = FALSE;
      }
      if ((!$order->this_user_allocated && $order->qty == 1) || $order->qty > 1) {
        $form['items'][$key]['alloc_instructions']['#value'] = '<h3>' . t("Ticket Allocation.") . "</h3>\n<p>" . t("Please allocate tickets using a <strong>valid email address</strong> for each user. Click 'Save' when you are done.") . '</p>';
      }
      $form['items'][$key]['order_id'] = array('#type' => 'hidden', '#value' => $order->order_id);
      $form['items'][$key]['order_product_id'] = array('#type' => 'hidden', '#value' => $order->order_product_id);
      $form['items'][$key]['order_qty'] = array('#type' => 'hidden', '#value' => $order->qty);
      $form['items'][$key]['uid'] = array('#type' => 'hidden', '#value' =>  $user->uid);
      $form['items'][$key]['myself'] = array(
        '#type' => 'checkbox',
        '#title'=> $exist_order_id ? 'You are already allocated a ticket under Order #' . $exist_order_id : 'One ticket is allocated to me',
        '#default_value' => $order->this_user_allocated ? TRUE : FALSE,
        '#disabled' => $exist_order_id ? TRUE : FALSE,
      );
      $allocations = $order->tickets;
      ksort($allocations);
      // Don't over allocate if current user is allocated.
      unset($allocations[$user->uid]);
      // And count form elements from 1 instead of 0.
      $start = $order->this_user_allocated ? 2 : 1;
      for ($count = $start; $count <= $order->qty; $count++) {
        $form['items'][$key]['allocations']['rows']['#theme'] = 'register_allocations_form_table';

        $account = array_shift($allocations);
        // Load the user profile, so we can show first name and surname.
        if($account->uid > 0)
          $profile = content_profile_load('profile', $account->uid);
        else
          unset($profile);

        $form['items'][$key]['allocations']['rows'][$count] = array();
        $form['items'][$key]['allocations']['rows'][$count]['remove'] = array(
          '#type' => 'checkbox',
          '#default_value' => FALSE,
          '#disabled' => $account ? FALSE : TRUE,
        );

        $form['items'][$key]['allocations']['rows'][$count]['firstname'] = array(
          '#type' => $account ? 'markup' : 'textfield',
          '#size' => 10,
          '#default_value' => $profile ? $profile->field_profile_firstname[0]['value'] : '',
          '#disabled' => $profile ? TRUE : FALSE,
        );
        if($profile)
          $form['items'][$key]['allocations']['rows'][$count]['firstname']['#value'] = $profile->field_profile_firstname[0]['value'];

        $form['items'][$key]['allocations']['rows'][$count]['surname'] = array(
          '#type' => $account ? 'markup' : 'textfield',
          '#size' => 10,
          '#default_value' => $profile ? $profile->field_profile_surname[0]['value'] : '',
          '#disabled' => $profile ? TRUE : FALSE,
        );
        if($profile)
          $form['items'][$key]['allocations']['rows'][$count]['surname']['#value'] = $profile->field_profile_surname[0]['value'];

        $form['items'][$key]['allocations']['rows'][$count]['organisation'] = array(
          '#type' => $account ? 'markup' : 'textfield',
          '#size' => 10,
          '#default_value' => $profile ? $profile->field_profile_organisation[0]['value'] : '',
          '#disabled' => $profile ? TRUE : FALSE,
        );
        if($profile)
          $form['items'][$key]['allocations']['rows'][$count]['organisation']['#value'] = $profile->field_profile_organisation[0]['value'];

        $form['items'][$key]['allocations']['rows'][$count]['mail'] = array(
          '#type' => $account ? 'hidden' : 'textfield',
          '#size' => 28,
          '#default_value' => $account ? $account->mail : '',
          '#disabled' => $account ? TRUE : FALSE,
        );

        $form['items'][$key]['allocations']['rows'][$count]['info'] = array(
          '#value' => $account ? l($account->mail, 'user/' . $account->uid) : '',
        );

        // Extra info
        $form['items'][$key]['allocations']['rows'][$count]['uid'] = array('#type' => 'hidden', '#value' => $account->uid);
      }
    }
  }
  
  if (count($orders)) {
    $form['submit'] = array('#type' => 'submit', '#value' => t('Save ticket allocations'));
  } else {
    $params = array();
    $params['!register'] = l('Buy a ticket', 'register');
    $params['!fullconf'] = l('full conference', 'fullconf');
    $params['!tuesday'] = l('Tuesday', 'tuesday');
    $params['!wednesday'] = l('Wednesday', 'wednesday');
    $params['!thursday'] = l('Thursday', 'thursday');
    $params['!friday'] = l('Friday', 'friday');
    $params['!dinner'] = l('conference dinner', 'dinner');
    $params['!leadership'] = l('leadership forum', 'leadership');

    $output = strtr(variable_get('register_no_allocations_blurb', ''), $params);

    $form['items']['none'] = array(
      '#type' => 'markup',
      '#value' => $output,
    );
  }

  return $form;
}

/**
 * Theme a table that is part of register_tickets_form
 */
function theme_register_allocations_form_table(&$element) {
  $titles = array('Remove', 'First name', 'Surname', 'Organisation', 'Email');
  foreach (element_children($element) AS $cnt) {
    $data[$cnt] = array(
      drupal_render($element[$cnt]['remove']),
      drupal_render($element[$cnt]['firstname']),
      drupal_render($element[$cnt]['surname']),
      drupal_render($element[$cnt]['organisation']),
      // drupal_render($element[$cnt]['mail']),
      drupal_render($element[$cnt]) );
  }
  $output = theme('table', $titles, $data);
  return $output;
}

function register_tickets_form_validate($form, &$form_state) {
  foreach($form_state['values']['items'] AS $oi => $order) {    
    $num = 0;
    foreach ($order['allocations']['rows'] AS $ri => $allocated) {
      if (!$allocated['remove'] && !$allocated['uid'] && $allocated['mail']) {
        // New allocation, shouldn't double up.
        $uid = db_result(db_query("SELECT uid FROM users WHERE LCASE(mail) = '%s'", strtolower(trim($allocated['mail']))));
        $order_id = register_check_user_allocated_nid($order->order_product_id, $uid);
        // dpm($uid); dpm($order_id);
        if ($order_id) {
          form_set_error('items][' . $oi . '][allocations][rows][' . $ri . '][mail',  $allocated['mail'] . ' already has a ticket on order #' . $order_id);
        }
        $num++;
        if ($num > $order['order_qty']) {
          form_set_error('items][' . $oi . '][allocations][rows][' . $ri . '][mail', t('You have !num ticket!plural, cannot allocate a ticket to !mail', array('!num' => $order['order_qty'], '!plural' => ($order['order_qty'] == 1) ? '' : 's', '!mail' => $allocated['mail'])));
        }
      }
    }
  }
  // register_check_user_allocated_nid

  // 1. Check that the user is not allocated on another order
  // 2. Check that the email is valid
  // 3. Check that only as many users as tickets are allocated.
}

function register_tickets_form_submit($form, &$form_state) {
  foreach($form_state['values']['items'] AS $order) {

    // Remove all current allocations for this order_product_id.
    //
    $sql = "DELETE FROM {ccc_ticket_allocation} WHERE order_product_id = %d";
    db_query($sql, $order['order_product_id']);

    if ($order['myself']) {
      register_allocate_ticket($order['order_product_id'], $order['uid']);
    }
    foreach ($order['allocations']['rows'] AS $allocated) {
      if (!$allocated['remove'] && ($allocated['uid'] || $allocated['mail'])) {
        $uid = $allocated['uid'] ? $allocated['uid'] : db_result(db_query("SELECT uid FROM users WHERE LCASE(mail) = '%s'", strtolower(trim($allocated['mail']))));
        if ($uid > 0) {
          register_allocate_ticket($order['order_product_id'], $uid);
        } else {
          if(valid_email_address($allocated['mail'])) {
            $new_uid = proposal_copresenter_create(array(
              'mail' => $allocated['mail'],
              'firstname' => $allocated['firstname'],
              'surname' => $allocated['surname'],
              'organisation' => $allocated['organisation'],
            ));
            $allocated[$uid] = $new_uid;
            register_allocate_ticket($order['order_product_id'], $new_uid);
          } else {
            drupal_set_message(t('@email is not a valid email address', array('@email' => $allocated['mail'])), 'error');
          }
        }
      }
    }
  }
  drupal_set_message("Ticket allocations have been saved.");
}

// ------------------------------------------------------------------------------------------
// Short specific API Functions 

/**
 * This returns an order_id of any 1 order (should only ever be one) that a user is allocated to.
 */
function register_check_user_allocated_nid($nid, $uid) {
  $found = db_result(db_query("SELECT ucop.order_id FROM {ccc_ticket_allocation} cccta INNER JOIN {uc_order_products} ucop ON ucop.order_product_id = cccta.order_product_id WHERE ucop.nid = %d AND cccta.uid = %d LIMIT 0, 1", $nid, $uid));
  return $found;
}

/**
 * Alocate a ticket to a user. Make sure we're not overallocating.
 * 
 * This could called on order completion using actions.
 */
function register_allocate_ticket($order_product_id, $uid) {
  // Get the nid and make sure the user is not already allocated to this event.
  $nid = db_result(db_query("SELECT nid FROM uc_order_products WHERE order_product_id = %d", $order_product_id));
  if ($nid && $uid) {
    $found = register_check_user_allocated_nid($nid, $uid);
    $victim = user_load($uid);
    if (!$found) {
      db_query("INSERT INTO {ccc_ticket_allocation} (order_product_id, uid) VALUES (%d, %d)", $order_product_id, $uid);
      register_toggle_attendee_role(&$victim);
      return TRUE;
    } else {
      $ticket = node_load($nid);
      drupal_set_message(t('!username already has a !ticket ticket assigned to them', array('!username' => theme('username', $victim), '!ticket' => $ticket->title)), 'warning');
    }
  }

  return FALSE;
}


// ------------------------------------------------------------------------------------------
// This may be moved to settings and configurations.

/**
 * Variable called 'ccc_register_allow_prepay_allocation'
 */

/**
 * Return a list of valid product IDs
 * 
 * Probably needs an admin screen to choose which nodes are allocatable.
 *
 * Another consideration is to make this funciton only return node types. Which would
 * look attractive if you started getting hundreds of allocatable nids.
 */
function register_ticketable_products() {
  $result = db_query("SELECT nid FROM node WHERE type = 'product' AND status = 1");
  while ($row = db_fetch_array($result)) {
    $nids[$row['nid']] = $row['nid'];
  }
  return $nids;
}

/**
 * Implementation of hook_order() in Übercart.
 *
 * @op		string
 *   operation type.
 * @order	object
 *   containing order info.
 * @a		var
 */
function register_order($op, $order, $a) {
  static $register_order;

  switch($op) {
    // When deleting an order, also delete the ticket allocations that belong with the order.
    //
    case 'delete':
      foreach ($order->products as $product) {
        db_query("DELETE FROM {ccc_ticket_allocation} WHERE order_product_id=%d", $product->order_product_id);
      }
      drupal_set_message(t('Deleted ticket allocations associated with order !order_id.', array('!order_id' => $order->order_id)));
      break;

    // When the order is saved - specifically when it is modified - the order_product_ids all change and
    // break ticket allocations! The only way to make that not be broken is by sticking the last order
    // that was viewed in this session in a static var, so it's available when the save handler is called.
    //
    // Ouch, ouch this is so ugly.
    //
    case 'load':
      $register_order = clone($order);
      break;

    // If we have an old order, check if an identical product nid is available in the the
    // current order and if its order_product_id is higher. If so, assume the order was updated
    // and update the ccc_ticket_allocation table with the new order_product_id.
    //
    case 'save':
      // If the order is no longer valid, remove its allocations.
      //
      if (!in_array($order->order_status, sessions_valid_order())) {
        foreach ($order->products as $id => $product) {
           db_query("DELETE FROM {ccc_ticket_allocation} WHERE order_product_id = %d", $product->order_product_id);
           // drupal_set_message(t('Removed ticket allocations for !status !ticket on this order.', array('!status' => $order->order_status, '!ticket' => $product->title)));
        }
      }

      // If the order was saved, the order_product_id on each product has been changed. Updated
      // any allocatiosn that may have been attached.
      //
      if (!empty($register_order) && $register_order->order_id == $order->order_id) {
        $new_products = array();
        $old_products = array();
        foreach ($order->products as $id => $product) {
          $new_products[$product->nid] = array('order_product_id' => $product->order_product_id, 'title' => $product->title);
          foreach ($register_order->products as $rid => $p) {
            $old_products[$p->nid] = array('order_product_id' => $p->order_product_id, 'title' => $product->title);
            if ($product->nid == $p->nid && $product->order_product_id > $p->order_product_id) {
              // If the new product has a lower qty than the old one, drop its allocations ... don't
              // try to guess which user gets to keep their allocation!
              //
              if ($product->qty < $p->qty) {
                db_query("DELETE FROM {ccc_ticket_allocation} WHERE order_product_id = %d", $product->order_product_id);
                drupal_set_message(t('Removed ticket allocations for modified !ticket on this order.', array('!ticket' => $product->title)));
              }
              // Stayed the same, just update.
              //
              else {
                db_query("UPDATE {ccc_ticket_allocation} SET order_product_id = %d WHERE order_product_id = %d", $product->order_product_id, $p->order_product_id);
                drupal_set_message(t('Updated ticket allocations for !ticket on this order.', array('!ticket' => $product->title)));
              }
            }
          }
        }
        // If the old product is NOT in the new order, drop its allocations.
        //
        // Get an array of old product ids that are not in the new product id array.
        //
        // $missing = array_diff_key($old_products, $new_products);
        // foreach ($missing as $product) {
        //   db_query("DELETE FROM {ccc_ticket_allocation} WHERE order_product_id = %d", $product['order_product_id']);
        //   drupal_set_message(t('Removed ticket allocations for deleted !ticket on this order.', array('!ticket' => $product['title'])));
        // }
      }
      unset($order);
      break;

    default:
      break;
  }
}

/**
 * Implementation of hook_uc_checkout_complete()
 *
 * When a user completes an order, create a content_profile for them.
 */
function register_uc_checkout_complete($order, $account) {

  // It seems $account is only set if a new user was just created, so lets not bother
  // if it's not set eh.
  //
  if (!empty($account) && $account->uid != 0) {
    $profile = content_profile_load('profile', $account->uid);

    if (empty($profile) || !$profile || $profile->uid == 0) {

      $state = db_result(db_query("SELECT zone_code FROM {uc_zones} WHERE zone_id=%d AND zone_country_id=%d", $order->billing_zone, $order->billing_country));
      $country = db_result(db_query("SELECT country_name country FROM {uc_countries} WHERE country_id=%d", $order->billing_country));

      // Create a profile for the user.
      $profile_attributes = array(
        'nid' => NULL, // NULL creates a new node.
        // 'title' => $new_user->name .'\'s Profile',
        'body' => NULL, // Defaults to no body.
        'type' => 'profile',
        'teaser' => NULL,
        'log' => '',
        'created' => '',
        'format' => FILTER_FORMAT_DEFAULT,
        'uid' => $account->uid,
        'field_profile_firstname' => array(array('value' => $order->billing_first_name)),
        'field_profile_surname' => array(array('value' => $order->billing_last_name)),
        'field_profile_organisation' => array(array('value' => $order->billing_company)),
        'field_profile_phone' => array(array('value' => $order->billing_phone)),
        'field_profile_address' => array(array('value' => $order->billing_street1)),
        'field_profile_city' => array(array('value' => $order->billing_city)),
        'field_profile_postcode' => array(array('value' => $order->billing_postal_code)),

        'field_profile_state' => array(array('value' => $state)),
        'field_profile_country' => array(array('value' => $country)),
      );

      // Save the profile.
      $new_profile = (object) $profile_attributes;
      node_save($new_profile);

    } // empty($profile)

    // If we have a newsletter, subscribe the user.
    //
    if (module_exists('simplenews') && ($tid = variable_get('register_newsletter_tid', 0))) {
      simplenews_subscribe_user($account->mail, $tid, FALSE);
    }

  } // empty($account)
}

/**
 * Create and display a table with presenters and whether or not these presenters
 * have registered (and paid) for the day their sessions are scheduled.
 */
function register_list_presenter_payment_status() {

  // Get all presenters (and co-presenters) for all proposals.
  $query = "SELECT
      cfpp.field_proposal_presenters_uid,
      cfpp.delta,
      cfpp.nid,
      u.mail,
      ctpr.field_profile_firstname_value,
      ctpr.field_profile_surname_value,
      uc_op.nid AS product_nid,
      uc_op.title AS product_title,
      uc_o.order_id AS order_id,
      uc_os.title AS order_status
    FROM
      {content_field_proposal_presenters} AS cfpp
    JOIN
      {content_type_proposal} AS ctp ON (cfpp.nid = ctp.nid)
    JOIN
      {node} AS n ON (n.uid=cfpp.field_proposal_presenters_uid AND n.type='profile')
    JOIN
      {content_type_profile} AS ctpr ON (n.nid = ctpr.nid)
    LEFT JOIN
      {users} AS u ON (cfpp.field_proposal_presenters_uid = u.uid)
    LEFT JOIN
      {ccc_ticket_allocation} AS ccc_ta ON (ccc_ta.uid = cfpp.field_proposal_presenters_uid)
    LEFT JOIN
      {uc_order_products} AS uc_op ON (ccc_ta.order_product_id = uc_op.order_product_id)
    LEFT JOIN
      {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id)
    LEFT JOIN
      {uc_order_statuses} AS uc_os ON (uc_o.order_status = uc_os.order_status_id)
    WHERE
      ctp.field_proposal_status_value IN('" . implode("','", sessions_valid_status()) . "')
      ";

  $header = array(
    array('data' => t('Proposal'),  'field' => 'cfpp.nid'),
    array('data' => t('Firstname'), 'field' => 'ctpr.field_profile_firstname_value'),
    array('data' => t('Surname'),   'field' => 'ctpr.field_profile_surname_value'),
    array('data' => t('Email'),     'field' => 'u.mail'),
    array('data' => t('Type'),      'field' => 'cfpp.delta'),
    array('data' => t('Status'),    'field' => 'uc_os.title'),
    array('data' => t('Product'),   'field' => 'uc_op.title'),
  );
  $query .= tablesort_sql($header);

  $result = db_query($query);

  while ($o = db_fetch_object($result)) {
    if (!count($tix)) {
      $tix = array('Not registered yet.');
    }

    $tuple = array(
      'nid' => l($o->nid, 'node/'. $o->nid),
      'firstname' => $o->field_profile_firstname_value,
      'surname' => $o->field_profile_surname_value,
      'email' => l($o->mail, 'user/ ' . $o->field_proposal_presenters_uid),
      'type' => ($o->delta == 0) ? 'Primary' : ordinalise($o->delta) . ' Co',
      'status' => ($o->order_status) ? l($o->order_status, 'admin/store/orders/' . $o->order_id) : '',
      'product' => $o->product_title,
    );
    $data[] = $tuple;
  }

  $output  = t('<h3>Found !num records</h3>', array('!num' => count($data)));
  $output .= t('<p>Note that a presenter will be listed once for each product in their order and more often if they are both a primary presenter for one or more sessions and a co-presenter for one or more other sessions.</p>');
  $output .= t('<p>Session schedule information is not yet available within the system.</p>');



  $output .= theme('table', $header, $data);
  return $output;
}

/**
 * Display couon codes used and the orders they wered used on.
 */
function register_list_coupon_status() {
  $query = "
    SELECT
      uc_co.oid AS order_id,
      uc_o.uid AS uid,
      ctp.field_profile_firstname_value AS firstname,
      ctp.field_profile_surname_value AS surname,
      uc_o.created AS order_date,
      uc_os.title AS order_status,
      uc_o.order_total AS order_total,
      uc_co.code AS coupon
    FROM
      {uc_coupons_orders} AS uc_co
    JOIN
      {uc_orders} AS uc_o ON (uc_o.order_id=uc_co.oid)
    JOIN
      {uc_order_statuses} AS uc_os ON (uc_o.order_status = uc_os.order_status_id)
    JOIN
      {node} AS n ON (n.uid=uc_o.uid AND n.type='profile')
    JOIN
      {content_type_profile} AS ctp ON (ctp.nid=n.nid)
    WHERE
      uc_o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')
    ";

  $header = array(
    array('data' => t('User'),   'field' => 'ctp.field_profile_surname_value'),
    array('data' => t('Order'),  'field' => 'uc_o.order_id'),
    array('data' => t('Status'), 'field' => 'uc_os.title'),
    array('data' => t('Total'),  'field' => 'uc_o.order_total'),
    array('data' => t('Date'),   'field' => 'uc_o.created'),
    array('data' => t('Coupon'), 'field' => 'uc_co.code'),
  );

  $query .= tablesort_sql($header);
  $result = db_query($query);

  while ($o = db_fetch_object($result)) {
    $tuple = array(
      'user' => ($o->uid) ? l($o->firstname . ' ' . $o->surname, 'user/' . $o->uid) : ($o->firstname . ' ' . $o->surname),
      'oid' => l($o->order_id, 'admin/store/orders/' . $o->order_id),
      'status' => $o->order_status,
      'total' => $o->order_total,
      'date' => strftime('%Y-%m-%d %H:%M', $o->order_date),
      'code' => $o->coupon,
    );
    $data[] = $tuple;
  }


  $suffix = (count($data) != 1) ? t('s') : t('');
  $verb = (count($data) != 1) ? t('have') : t('has');
  $output  = t('<h3>!num Coupon!s !verb been used</h3>', array('!num' => count($data), '!s' => $suffix, '!verb' => $verb));

  $output .= theme('table', $header, $data);

  return $output;
}

/**
 * Return a random list of registrees
 */
function register_prizedraw() {

  // Get all users who have a completed or payment received ticket allocated to them.
  $query = "SELECT
      ccc_ta.uid AS uid,
      uc_op.order_id AS order_id,
      uc_op.order_product_id,
      uc_o.order_status AS order_status,
      n.title,
      ctp.field_profile_firstname_value AS firstname,
      ctp.field_profile_surname_value AS surname
    FROM
      {uc_order_products} AS uc_op
    JOIN
      {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id)
    JOIN
      {ccc_ticket_allocation} AS ccc_ta ON (ccc_ta.order_product_id=uc_op.order_product_id)
    JOIN
      {node} AS n ON (uc_op.nid=n.nid)
    LEFT JOIN
      {node} AS np ON (ccc_ta.uid=np.uid AND np.type='profile')
    LEFT JOIN
      {content_type_profile} AS ctp ON(np.nid=ctp.nid)
    WHERE
      uc_o.order_status IN ('completed','payment_received')
    GROUP BY
      ccc_ta.uid
    ORDER BY
      RAND()
    LIMIT
      10";

  $result = db_query($query);

  while ($o = db_fetch_object($result)) {
    $tuple = array(
      'user' => ($o->uid) ? l($o->firstname . ' ' . $o->surname, 'user/' . $o->uid) : ($o->firstname . ' ' . $o->surname),
      'oid' => l($o->order_id, 'admin/store/orders/' . $o->order_id),
      'order' => $o->title,
      'status' => $o->order_status,
    );
    $data[] = $tuple;
  }

  $headers = array('Name', 'Order', 'Product', 'Status');

  $output  = t('<p>Here are 10 random people with tickets from a completed or paid order allocated to them.');
  $output .= theme('table', $headers, $data);

  return $output;
}

/**
 * Filter form for the attendee listing.
 */
function register_product_filter_form($form_state) {
  // Create a keyed array of products.
  //
  $options = array(0 => 'List all');
  $result = db_query("SELECT nid,title FROM {node} WHERE type = 'product'");
  while ($o = db_fetch_object($result)) {
    $options[$o->nid] = $o->title;
  }

  $form = array();
  $form['filter'] = array(
    '#title' => 'Filter',
    '#type' => 'fieldset',
    '#description' => 'Choose a product to filter the results by.',
  );
  $form['filter']['product'] = array(
    '#title' => 'Product',
    '#type' => 'select',
    '#options' => $options,
  );
  $form['filter']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Filter',
  );
}

/**
 * List all users with a ticket of some kind allocated to them.
 */
function register_list_attendees() {

  $count_query = "SELECT
      COUNT(DISTINCT(ccc_ta.uid))
    FROM
      {uc_order_products} AS uc_op
    JOIN
      {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id)
    JOIN
      {ccc_ticket_allocation} AS ccc_ta ON (ccc_ta.order_product_id=uc_op.order_product_id)
    JOIN
      {node} AS n ON (uc_op.nid=n.nid)
    WHERE
      uc_o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')";

  $select_query = "SELECT
      ccc_ta.uid AS uid,
      uc_op.order_id AS order_id,
      uc_op.order_product_id,
      uc_o.order_status AS order_status,
      n.title,
      ctp.field_profile_firstname_value AS firstname,
      ctp.field_profile_surname_value AS surname
    FROM
      {uc_order_products} AS uc_op
    JOIN
      {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id)
    JOIN
      {ccc_ticket_allocation} AS ccc_ta ON (ccc_ta.order_product_id=uc_op.order_product_id)
    JOIN
      {users} AS u ON (u.uid = ccc_ta.uid)
    JOIN
      {node} AS n ON (uc_op.nid=n.nid)
    LEFT JOIN
      {node} AS np ON (ccc_ta.uid=np.uid AND np.type='profile')
    LEFT JOIN
      {content_type_profile} AS ctp ON(np.nid=ctp.nid)
    WHERE
      uc_o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')
    GROUP BY
      ccc_ta.uid
    ORDER BY
      ctp.field_profile_surname_value ASC,
      ctp.field_profile_firstname_value ASC";

  $items_per_page = 20;
  $total = db_result(db_query($count_query));
  $page = intval($_REQUEST['page']);

  $select_query = db_rewrite_sql($select_query);
  $result = pager_query($select_query, $items_per_page, 0, $count_query);

  while ($o = db_fetch_object($result)) {
    $tuple = array(
      'user' => ($o->firstname) ? l($o->firstname . ' ' . $o->surname, 'user/' . $o->uid) : l($o->username, 'user/'. $o->uid),
      'oid' => l($o->order_id, 'admin/store/orders/' . $o->order_id),
      'order' => $o->title,
      'status' => $o->order_status,
    );
    $data[] = $tuple;
  }

  $headers = array('Name', 'Order', 'Product', 'Status');

  drupal_set_title('Attendee Report');
  $output .= t('Listing !start - !end of !total attendees who have a ticket of any kind allocated to them.',
    array(
      '!start' => ($items_per_page * $page) + 1,
      '!end' => min($total, ($items_per_page * ($page + 1))),
      '!total' => $total,
    ));
  $output .= drupal_get_form('register_product_filter');
  $output .= theme('table', $headers, $data);
  $output .= theme('pager', array(), $items_per_page);

  return $output;
}

/**
 * Provide an overview of various registration numbers.
 */
function register_list_overview() {

  if (!module_exists("sessions")) {
    return t('The sessions module is required for these reports.');
  }

  $output = '';

  // Number of distinct users with a ticket of any kind allocated to them.
  //
  $attendees = db_result(db_query("SELECT COUNT(DISTINCT(uid)) FROM {ccc_ticket_allocation}"));
  $output .= '<h3>Overview</h3>';
  $output .= t('<p>There are !num distinct people who have a ticket of any kind allocated to them. Note that this may include allocations from cancelled tickets!', array('!num' => $attendees));
  $output .= '<hr size="1" />';

  // Number of people with each ticket type.
  //
  $data = array();
  $query = "SELECT DISTINCT(op.nid) AS nid, op.title AS ticket, SUM(op.qty) AS sold FROM {uc_order_products} AS op LEFT JOIN {uc_orders} AS o ON (o.order_id=op.order_id) WHERE o.order_status IN ('" . implode("', '", sessions_valid_order()) . "') AND op.nid <> 0 GROUP BY op.nid";
  $result = db_query($query);

  while($row = db_fetch_array($result)) {
    $row['sold'] = l($row['sold'], 'admin/store/reports/custom/overview/' . $row['nid']);
    unset($row['nid']);
    $data[] = $row;
  }
  $output .= '<h3>Tickets Sold</h3>';
  $output .= '<p>These numbers include only tickets from orders with status ' . implode(', ', sessions_valid_order()) . '.';
  $output .= t('<p>To view lists of people with each of these ticket types assigned to them, please visit the !list.', array('!list' => l('mail merge lists', 'news/mail-merge-lists')));
  $output .= theme('table', array('Ticket', 'Sold Qty'), $data);
  $output .= '<hr size="1" />';

  // Allocated tickets.
  //
  $data = array();
  $query = "SELECT DISTINCT(uc_op.nid) AS nid, uc_op.title AS title, COUNT(ccc_ta.uid) AS allocated FROM {uc_order_products} AS uc_op JOIN {ccc_ticket_allocation} AS ccc_ta ON (uc_op.order_product_id = ccc_ta.order_product_id) WHERE uc_op.nid <> 0 GROUP BY uc_op.nid";
  $result = db_query($query);

  while($row = db_fetch_array($result)) {
    unset($row['nid']);
    $data[] = $row;
  }
  $output .= '<h3>Tickets Allocated</h3>';
  $output .= theme('table', array('Ticket', 'Allocated Qty'), $data);
  $output .= '<hr size="1" />';

  // Total number of presenters.
  //
  $data = array();

  $presenters_total = db_result(db_query("SELECT COUNT(DISTINCT(field_proposal_presenters_uid)) AS num FROM {content_field_proposal_presenters} AS cfpp
LEFT JOIN {node} AS n ON (n.nid = cfpp.nid)
LEFT JOIN {content_type_proposal} AS ctp ON (ctp.vid = n.vid) WHERE ctp.field_proposal_status_value IN ('" . implode("','", sessions_valid_status()) . "')"));
  $data[] = array(
    'Total presenters',
    $presenters_total,
    100
  );

  // Presenters who have an allocated ticket.
  //
  $presenters_ticket = db_result(db_query("SELECT COUNT(DISTINCT(cfpp.field_proposal_presenters_uid)) AS num FROM {content_field_proposal_presenters} AS cfpp JOIN {ccc_ticket_allocation} AS ccc_ta ON (cfpp.field_proposal_presenters_uid = ccc_ta.uid)
LEFT JOIN {node} AS n ON (n.nid = cfpp.nid)
LEFT JOIN {content_type_proposal} AS ctp ON (ctp.vid = n.vid) WHERE ctp.field_proposal_status_value IN ('" . implode("','", sessions_valid_status()) . "')"));
  $data[] = array(
    'Presenters with allocated ticket',
    $presenters_ticket,
    sprintf("%0.1f", ($presenters_ticket / $presenters_total) * 100)
  );

  // Presenters who do not have an allocated ticket.
  //
  $presenters_noticket = db_result(db_query("SELECT COUNT(DISTINCT(cfpp.field_proposal_presenters_uid)) AS num FROM {content_field_proposal_presenters} AS cfpp
LEFT JOIN {node} AS n ON (n.nid = cfpp.nid)
LEFT JOIN {content_type_proposal} AS ctp ON (ctp.vid = n.vid) WHERE ctp.field_proposal_status_value IN ('" . implode("','", sessions_valid_status()) . "')
AND cfpp.field_proposal_presenters_uid NOT IN (SELECT uid FROM {ccc_ticket_allocation})"));
  $data[] = array(
    'Presenters without allocated ticket',
    $presenters_noticket,
    sprintf("%0.1f", ($presenters_noticket / $presenters_total) * 100)
  );

  $output .= '<h3>Presenter Registration Info</h3>';
  $output .= theme('table', array('Presenters', 'Number', 'Percentage'), $data);
  $output .= t('<p><em>Note that these numbers reflect presenters and co-presenters whose proposals are listed as <strong>accepted</strong> and who have an <string>allocated</strong> ticket. We cannot limit this to presenters who have bought a ticket, as their ticket may be purchased for them by a third party. This means presenters who purchased their own ticket, but did not allocate it to themselves are counted here as not having a ticket.</em>');

  drupal_set_title('Registration Overview');
  return $output;
}

/**
 * Show a list of orders that include a specific ticket type.
 */
function register_list_order_by_ticket($nid) {
  if (empty($nid) || !($ticket = node_load($nid)) )
    return;

  $header = array(
    array('data' => t('Order ID'),   'field' => 'o.order_id'),
    array('data' => t('First name'), 'field' => 'pro.field_profile_firstname_value'),
    array('data' => t('Surname'),    'field' => 'pro.field_profile_surname_value'),
    array('data' => t('Date'),       'field' => 'o.created'),
    array('data' => t('Status'),     'field' => 'o.order_status'),
    array('data' => t('Qty'),        'field' => 'op.qty'),
    array('data' => t('Unallocated')),
  );

  $query = "
SELECT
  o.order_id,
  o.uid,
  pro.field_profile_firstname_value AS firstname,
  pro.field_profile_surname_value AS surname,
  o.created AS date,
  o.order_status,
  op.order_product_id,
  op.qty
FROM
  {uc_order_products} AS op
LEFT JOIN
  {uc_orders} AS o ON (op.order_id = o.order_id)
LEFT JOIN
  {node} AS n ON (o.uid = n.uid AND n.type = 'profile')
LEFT JOIN
  {content_type_profile} AS pro ON (n.vid = pro.vid)
WHERE
    op.nid = %d
  AND
    o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')
";

  $query .= tablesort_sql($header);
  $result = db_query($query, $ticket->nid);

  $data = array();
  while ($row = db_fetch_array($result)) {
    $row['order_id'] = l($row['order_id'], 'admin/store/orders/' . $row['order_id']);
    $row['firstname'] = l($row['firstname'], 'user/' . $row['uid']);
    $row['surname'] = l($row['surname'], 'user/' . $row['uid']);
    $row['date'] = date('Y-m-d', $row['date']);

    // Check if this order has unallocated tickets.
    //
    $allocated = db_result(db_query("SELECT COUNT(uid) FROM {ccc_ticket_allocation} WHERE order_product_id = %d", $row['order_product_id']));
    if ($allocated != $row['qty']) {
      $row[] = l('unallocated', 'user/' . $row['uid'] . '/tickets');
    }

    // Don't need these anymore.
    //
    unset($row['uid']);
    unset($row['order_product_id']);

    $data[] = $row;
  }

  $output  = t('<p>Listing !num orders that contain one or more of this ticket.', array('!num' => count($data)));
  $output .= theme('table', $header, $data);

  drupal_set_title(t('!ticket Ticket List', array('!ticket' => $ticket->title)));
  return $output;
}


function register_list_dinner() {

  // Select all users with an assigned *dinner* ticket, order by surname, firstname.
  //
  $query = "
SELECT
  DISTINCT(ta.uid) AS uid,
  pro.field_profile_firstname_value AS firstname,
  pro.field_profile_surname_value AS surname,
  pro.field_profile_position_value AS position,
  pro.field_profile_organisation_value AS organisation
FROM
  {ccc_ticket_allocation} AS ta
LEFT JOIN
  {node} AS n ON (n.uid = ta.uid AND n.type = 'profile')
LEFT JOIN
  {content_type_profile} AS pro ON (n.nid = pro.nid)
LEFT JOIN
  {uc_order_products} AS uc_op ON (ta.order_product_id = uc_op.order_product_id)
LEFT JOIN
  {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id)
WHERE
    uc_o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')
  AND
    uc_op.nid = %d
";

  $header = array(
    array('data' => t('Uid'),          'field' => 'ta.uid'),
    array('data' => t('Surname'),      'field' => 'pro.field_profile_firstname_value'),
    array('data' => t('Firstname'),    'field' => 'pro.field_profile_surname_value'),
    array('data' => t('Position'),     'field' => 'pro.field_profile_position_value'),
    array('data' => t('Organisation'), 'field' => 'pro.field_profile_organisation_value'),
  );

  $query .= tablesort_sql($header);
  $result = db_query($query, DINNER_TICKET_NID);

  $data = array();
  while ($row = db_fetch_array($result)) {
    $data[] = $row;
  }

  $output  = t('<p>Listing !num attendees.', array('!num' => count($data)));
  $output .= theme('table', $header, $data);

  drupal_set_title('Dinner Ticket List');
  return $output;
}

function ordinalise($number) {
  if (in_array(($number % 100),range(11,13))){
    return $number.'th';
  } else {
    switch (($number % 10)) {
     case 1:
      return $number.'st';
      break;
    case 2:
      return $number.'nd';
      break;
    case 3:
      return $number.'rd';
    break;
    default:
      return $number.'th';
      break;
    }
  }
}

/**
 * Obtain a number of "products" that are assigned to this user.
 *
 * @uid
 *   An integer referring to a user.
 */
function register_get_tickets($uid) {
  $query = "SELECT DISTINCT(uc_op.nid), n.title FROM {uc_order_products} AS uc_op JOIN 
    {ccc_ticket_allocation} AS cccta ON (uc_op.order_product_id = cccta.order_product_id)
    JOIN {node} AS n ON (uc_op.nid = n.nid)
    WHERE cccta.uid=%d";
  $result = db_query($query, $uid);
  while ($o = db_fetch_object($result)) {
    $data[] = $o;
  }
  return $data;
}

// Skeleton code for mailmerge.
//
// Presenters who haven't registered
//   (proposal accepted and uid in proposal_presenters and not in uc_orders and not in ccc_ticket_allocation)
// Presenters who have registered, but not allocated their ticket
//   (proposal accepted and uid in proposal_presenters and in uc_orders and not in ccc_ticket_allocation)
// Presenters who have registered and allocated their ticket, but have not selected sessions
//   (proposal accepted and uid in proposal_presenters and in ccc_ticket_allocation and not in ccc_session_selection)
// Users whose order hasn't had its tickets allocated yet
//   (order_product_id not in ccc_ticket_allocation)
// Users who haven't got a ticket allocated to them
//   (uid not in ccc_ticket_allocation)
// Users who have got a ticket allocated to them
//   (uid in ccc_ticket_allocation)
// Users with tickets who haven't selected sessions yet
//   (uid in ccc_ticket_allocation and not in ccc_session_selection)
// Users with tickets who have selected sessions
//   (uid in ccc_ticket_allocation and in ccc_session_selection)
// Users with accessibility or dietary needs
//   (data in content_type_profile fields)

// u.uid, u.mail, pro.firstname, pro.surname
//   proposal, scheduled
//   link to pro
//   link to ccc_ta
//   link to ccc_ss

/**
 * Wrapper to display badge data.
 */
function register_export_badges() {
  global $tickets_allocated;
  $tickets_allocated = array();

  // Fetch the data.
  $badges = register_export_badge_data();

  drupal_set_title('Badge Data ACEC2010 ' . date('Ymd'));

  $dinners = 0;
  foreach ($badges['data'] as $row) {
    $dinners += $row[8];
  }

  $outpute = t('Badge data for !num attendees, including !dinners dinner tickets.', array('!num' => count($badges['data']), '!dinners' => $dinners));
  $output .= theme('table', $badges['header'], $badges['data']);

  $data = array();
  foreach ($tickets_allocated as $key => $val) {
    $data[] = array($key, $val);
  }
  return $output;
}

/**
 * Wrapper to spit out badge data in CSV format.
 */
function register_export_badges_csv() {
  // Fetch the data.
  $badges = register_export_badge_data();

  print theme('register_badges', $badges['header'], $badges['data'], ',', '"', 'text/csv; charset=utf-8', 'ACEC2010_Badges_' . date('Ymd') . '.csv');
}

/**
 * Create badge data.
 *
 * @param $needs
 *   Boolean - include special needs, or not.
 * @param $users
 *   A list of user uids that should NOT be included (presumably because they were in a previous badge run)
 *
 * @return
 *   A keyed array containing 'header' and 'data' arrays.
 */
function register_export_badge_data($needs = FALSE, $users = array()) {

  global $tickets_allocated;

  $rid = db_result(db_query("SELECT rid FROM {role} WHERE name='attendee'"));

// Select all users with an assigned ticket, order by surname, firstname.\
// But not dinner tix. These get no badges.
//
$query = "
SELECT
  DISTINCT(u.uid) AS uid,
  pro.field_profile_firstname_value AS firstname,
  pro.field_profile_surname_value AS surname,
  pro.field_profile_position_value AS position,
  pro.field_profile_organisation_value AS organisation,
  u.mail AS mail,
  pro.field_profile_dietary_value AS diet,
  pro.field_profile_accessibility_value AS access
FROM
  {users} AS u
LEFT JOIN
  {users_roles} AS r ON (r.uid = u.uid)
LEFT JOIN
  {node} AS n ON (n.uid = u.uid AND n.type = 'profile')
LEFT JOIN
  {content_type_profile} AS pro ON (n.nid = pro.nid)
LEFT JOIN
  {ccc_ticket_allocation} AS ta ON (ta.uid = u.uid)
LEFT JOIN
  {uc_order_products} AS uc_op ON (ta.order_product_id = uc_op.order_product_id)
LEFT JOIN
  {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id)
WHERE
  (
    (
      uc_o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')
    AND
      uc_op.nid <> %d
    )
  OR
    r.rid = %d
  OR
    (
        u.uid IN (
          SELECT DISTINCT(cfpp.field_proposal_presenters_uid) FROM content_field_proposal_presenters AS cfpp JOIN {node} AS np ON (cfpp.vid = np.vid) JOIN {content_type_proposal} AS ctp ON (np.vid = ctp.vid) WHERE ctp.field_proposal_status_value IN ('" . implode("','", sessions_valid_status()) ."')
        )
      AND
        pro.field_profile_ignore_value <> 1
    )
  )
";
  if (count($users)) {
    $query .= " AND u.uid NOT IN (" . implode(',', $users) . ")";
  }

  $header = array(
    array('data' => 'Uid'         , 'field' => 'ta.uid'),
    array('data' => 'Firstname'   , 'field' => 'pro.field_profile_firstname_value'),
    array('data' => 'Surname'     , 'field' => 'pro.field_profile_surname_value', 'sort' => 'asc'),
    array('data' => 'Position'    , 'field' => 'pro.field_profile_position_value'),
    array('data' => 'Organisation', 'field' => 'pro.field_profile_organisation_value'),
    array('data' => 'Email'       , 'field' => 'u.mail'),
    array('data' => 'Dietary'),
    array('data' => 'Accessibility'),
    array('data' => 'Role'),
    array('data' => 'Colour'),
    array('data' => 'PCA'),
    array('data' => 'VIP Insert'),
    array('data' => 'Dinner'),
    array('data' => 'Tuesday'),
    array('data' => 'Wednesday'),
    array('data' => 'Thursday'),
    array('data' => 'Friday'),
  );

  $query .= tablesort_sql($header);
  if ($needs)
    $result = db_query($query, DINNER_TICKET_NID, $rid, DINNER_TICKET_NID);
  else
    $result = db_query($query, DINNER_TICKET_NID, $rid, DINNER_TICKET_NID);

  $data = array();

  while ($row = db_fetch_object($result)) {
    $account = user_load($row->uid);

    // For each of these people, check their ticket type(s). leadership, tour, dinner, wed, thu, fri, expo.
    $query = "
SELECT 
  uc_op.nid, uc_op.title
FROM
  {ccc_ticket_allocation} AS ta
LEFT JOIN
  {uc_order_products} AS uc_op ON (ta.order_product_id = uc_op.order_product_id)
LEFT JOIN
  {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id)
WHERE
    ta.uid = %d
  AND
    uc_o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')
";
    $tickets = db_query($query, $account->uid);

    $list = array();
    while ($tix = db_fetch_object($tickets)) {
      $list[$tix->nid] = $tix->title;
    }

    // If they have no tickets allocated AND are not a special role, ignore them!

    // if they *only* have a dinner ticket, do not include them.
    //
    if (count($list) == 1 && $list[118])
      continue;

    $tuple = array(
      'uid' => $row->uid,
      'firstname' => $row->firstname,
      'surname' => $row->surname,
      'position' => $row->position,
      'organisation' => $row->organisation,
      'mail' => $row->mail,
      'diet' => $row->diet,
      'access' => $row->access
    );

    // For each of these people, check whether they are speaking, a sponsor, a volunteer or an ACCE boarder.
    $tuple['role'] = register_export_badges_format_roles($account, $list);

    $tuple['colour'] = register_export_badges_format_ticket_colour($list);

    if (register_export_badges_format_ticket_colour($list) == 'WAHOONIE') {
      dpm($account);
      dpm($list);
    }

    $tuple['pca'] = register_export_badges_format_ticket_flags($list);

    $tuple['vip'] = register_export_badges_format_vip($account);

    $tuple['dinner'] = register_export_badges_format_dinners($account);

    $days = register_export_badges_format_ticket_days($list);

    foreach ($days as $key => $value) {
      $tuple[$key] = $value;
    }

    $data[] = $tuple;
  }

  return array('header' => $header, 'data' => $data);
}

/**
 * Create itouch data.
 *
 * @return
 *   A keyed array cotaining 'header' and 'data' arrays.
 */
function register_export_itouch_data() {

  global $tickets_allocated;

  $rid = db_result(db_query("SELECT rid FROM {role} WHERE name='attendee'"));

// Select all users with an assigned ticket, order by surname, firstname.\
// But not dinner tix. These get no badges.
//
$query = "
SELECT
  DISTINCT(u.uid) AS uid,
  pro.field_profile_firstname_value AS firstname,
  pro.field_profile_surname_value AS surname,
  pro.field_profile_organisation_value AS organisation,
  pro.field_profile_city_value AS suburb,
  pro.field_profile_state_value AS state,
  u.mail AS mail
FROM
  {users} AS u
LEFT JOIN
  {users_roles} AS r ON (r.uid = u.uid)
LEFT JOIN
  {node} AS n ON (n.uid = u.uid AND n.type = 'profile')
LEFT JOIN
  {content_type_profile} AS pro ON (n.nid = pro.nid)
LEFT JOIN
  {ccc_ticket_allocation} AS ta ON (ta.uid = u.uid)
LEFT JOIN
  {uc_order_products} AS uc_op ON (ta.order_product_id = uc_op.order_product_id)
LEFT JOIN
  {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id)
WHERE
  (
    (
      uc_o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')
    AND
      uc_op.nid <> %d
    )
  OR
    r.rid = %d
  OR
    (
        u.uid IN (
          SELECT DISTINCT(cfpp.field_proposal_presenters_uid) FROM content_field_proposal_presenters AS cfpp JOIN {node} AS np ON (cfpp.vid = np.vid) JOIN {content_type_proposal} AS ctp ON (np.vid = ctp.vid) WHERE ctp.field_proposal_status_value IN ('" . implode("','", sessions_valid_status()) ."')
        )
      AND
        pro.field_profile_ignore_value <> 1
    )
  )
";

  $header = array(
    array('data' => 'Uid'          , 'field' => 'ta.uid'),
    array('data' => 'Firstname'    , 'field' => 'pro.field_profile_firstname_value'),
    array('data' => 'Surname'      , 'field' => 'pro.field_profile_surname_value', 'sort' => 'asc'),
    array('data' => 'Organisation' , 'field' => 'pro.field_profile_organisation_value'),
    array('data' => 'City/Suburb'  , 'field' => 'pro.field_profile_city_value'),
    array('data' => 'State'        , 'field' => 'pro.field_profile_state_value'),
    array('data' => 'Email Address', 'field' => 'u.mail'),
  );

  $query .= tablesort_sql($header);
  $result = db_query($query, DINNER_TICKET_NID, $rid, DINNER_TICKET_NID);

  $data = array();

  while ($row = db_fetch_object($result)) {
    $account = user_load($row->uid);

    // For each of these people, check their ticket type(s). leadership, tour, dinner, wed, thu, fri, expo.
    $query = "
SELECT 
  uc_op.nid, uc_op.title
FROM
  {ccc_ticket_allocation} AS ta
LEFT JOIN
  {uc_order_products} AS uc_op ON (ta.order_product_id = uc_op.order_product_id)
LEFT JOIN
  {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id)
WHERE
    ta.uid = %d
  AND
    uc_o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')
";
    $tickets = db_query($query, $account->uid);

    $list = array();
    while ($tix = db_fetch_object($tickets)) {
      $list[$tix->nid] = $tix->title;
    }

    // if they *only* have a dinner ticket, do not include them.
    //
    if (count($list) == 1 && $list[118])
      continue;

    $tuple = array($row->uid, $row->firstname, $row->surname, $row->organisation, $row->suburb, $row->state, $row->mail);

    $data[] = $tuple;
  }

  return array('header' => $header, 'data' => $data);
}

 /**
 * Check a user for a highest role that needs to be printed on their badge.
 */
function register_export_badges_format_roles($account, $tickets) {

  if (in_array('keynote', $account->roles))
    return 'KEYNOTE';

  if (in_array('acce board', $account->roles))
    return 'ACCE';

  if (in_array('ictev board', $account->roles))
    return 'ICTEV';

  if (in_array('site administrator', $account->roles))
    return 'ORGANISER';

  if (in_array('papers chair', $account->roles))
    return 'ORGANISER';

  if (in_array('sponsor', $account->roles))
    return 'SPONSOR';

  // Is this person a speaker?
  //
  $query = "
SELECT
  COUNT(DISTINCT(cfpp.field_proposal_presenters_uid)) AS num FROM
  {content_field_proposal_presenters} AS cfpp
LEFT JOIN
  {content_type_proposal} AS ctp ON (ctp.nid = cfpp.nid)
WHERE
    ctp.field_proposal_status_value IN ('" . implode("','", sessions_valid_status()) . "')
  AND
    cfpp.field_proposal_presenters_uid = %d";
  $presenter = db_result(db_query($query, $account->uid));

  if ($presenter) {
    $rid = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", 'presenter'));
    $roles = $account->roles + array($rid => 'presenter');
    user_save($account, array('roles' => $roles));
    return 'PRESENTER';
  }

  if (in_array('volunteer', $account->roles))
    return 'VOLUNTEER';

  if ($tickets[4942] || $tickets[4944] || $tickets[4946])
    return 'EXPO';

  if (in_array('attendee', $account->roles))
    return 'DELEGATE';

  return 'WAHOONIE';
}

/**
 * Check a list of tickets for a set of data that needs to go on their badge.
 */
function register_export_badges_format_ticket_colour($tickets) {

  global $tickets_allocated;

  // Expo only.
  if ($tickets[4942] || $tickets[4944] || $tickets[4946])
    return 'yellow';

  // 3 dailies
  if ($tickets[122] && $tickets[124] && $tickets[126]) {
    if ($tickets[122]) $tickets_allocated['wednesday']++;
    if ($tickets[124]) $tickets_allocated['thursday']++;
    if ($tickets[126]) $tickets_allocated['friday']++;
    return '';
  }

  // 3 dailies students
  if ($tickets[4036] && $tickets[4042] && $tickets[4044]) {
    if ($tickets[4046]) $tickets_allocated['student_wednesday']++;
    if ($tickets[4042]) $tickets_allocated['student_thursday']++;
    if ($tickets[4044]) $tickets_allocated['student_friday']++;
    return '';
  }

  // full conf
  if ($tickets[114] || $tickets[1590]) {
    $tickets_allocated['fullconf']++;
    return '';
  }

  // full conf student
  if ($tickets[4046]) {
    $tickets_allocated['student_fullconf']++;
    return '';
  }

  // If we got to here, the user needs a combo-colour badge.
  $colours = array();

  // Something on tuesday
  if ($tickets[3656] || $tickets[116] || $tickets[3722] || $tickets[3724] || $tickets[3726] || $tickets[3728] || $tickets[4800] || $tickets[4796] && $tickets[4789])
    $colours[] = 'orange';

  // Something on wednesday
  if ($tickets[4942] || $tickets[4036] || $tickets[122] || $tickets[4936]) {
    $colours[] = 'red';
  }

  // Something on thursday
  if ($tickets[4944] || $tickets[4042] || $tickets[124] || $tickets[4938])
    $colours[] = 'green';

  // Something on friday
  if ($tickets[4946] || $tickets[4044] || $tickets[126] || $tickets[4940])
    $colours[] = 'purple';

  if (count($colours) == 4)
    return '';

  if (!count($colours)) {
    return '';
  }

  return implode(' + ', $colours);
}

/**
 * Check a list of tickets for a set of data that needs to go on their badge.
 */
function register_export_badges_format_ticket_days($tickets) {

  $days = array(
    'tuesday' => 0,
    'wednesday' => 0,
    'thursday' => 0,
    'friday' => 0,
  );

  // Expo only.
  if ($tickets[4942]) $days['wednesday'] = 1;
  if ($tickets[4944]) $days['thursday'] = 1;
  if ($tickets[4946]) $days['friday'] = 1;

  // 3 dailies
  if ($tickets[122]) $days['wednesday'] = 1;
  if ($tickets[124]) $days['thursday'] = 1;
  if ($tickets[126]) $days['friday'] = 1;

  // 3 dailies students
  if ($tickets[4046]) $days['wednesday'] = 1;
  if ($tickets[4042]) $days['thursday'] = 1;
  if ($tickets[4044]) $days['friday'] = 1;

  // full conf
  if ($tickets[114] || $tickets[1590] || $tickets[4096]) {
    $days['wednesday'] = 1;
    $days['thursday'] = 1;
    $days['friday'] = 1;
  }

  // Something on tuesday
  if ($tickets[3656] || $tickets[116] || $tickets[3722] || $tickets[3724] || $tickets[3726] || $tickets[3728] || $tickets[4800] || $tickets[4796] && $tickets[4789])
    $days['tuesday'] = 1;

  // Something on wednesday
  if ($tickets[4942] || $tickets[4036] || $tickets[122] || $tickets[4936])
    $days['wednesday'] = 1;

  // Something on thursday
  if ($tickets[4944] || $tickets[4042] || $tickets[124] || $tickets[4938])
    $days['thursday'] = 1;

  // Something on friday
  if ($tickets[4946] || $tickets[4044] || $tickets[126] || $tickets[4940])
    $days['friday'] = 1;

  if(!in_array(1, $days)) {
    $days['wednesday'] = 1;
    $days['thursday'] = 1;
    $days['friday'] = 1;
  }

  return $days;
}


/**
 * Check a list of tickets for a set of data that needs to go on their badge.
 */
function register_export_badges_format_ticket_flags($tickets) {

  global $tickets_allocated;

  // See what's in here and make a string.
  // 
  // L, T1, T2, 6, 7, 8, 9
  $flags = array();

  // Gary
  if ($tickets[3656]) {
    $flags[] = 'G';
    $tickets_allocated['breakfast']++;
  }


  // Leadership.
  if ($tickets[116]) {
    $flags[] = 'L';
    $tickets_allocated['leadership']++;
  }

  // Teamboard begin
  if ($tickets[3722]) {
    $flags[] = 'B';
    $tickets_allocated['teamboard_beginner']++;
  }

  // Teamboard intermediate
  if ($tickets[3724]) {
    $flags[] = 'T';
    $tickets_allocated['teamboard_intermediate']++;
  }

  // Lego robotics
  if ($tickets[3726]) {
    $flags[] = 'R';
    $tickets_allocated['lego_robotics']++;
  }

  // Lego science
  if ($tickets[3728]) {
    $flags[] = 'S';
    $tickets_allocated['lego_science']++;
  }

  // Tour all day
  if ($tickets[4800] || ($tickets[4796] && $tickets[4789])) {
    $flags[] =  'D';
    if ($tickets[4800])
      $tickets_allocated['tour_day']++;
  }

  // Tour AM
  elseif ($tickets[4796]) {
    $flags[] = 'A';
    $tickets_allocated['tour_am']++;
  }

  // Tour PM
  elseif ($tickets[4789]) {
    $flags[] = 'P';
    $tickets_allocated['tour_pm']++;
  }

  // Expo only?
  if ($tickets[4942]) {
    $flags[] = '7';
    $tickets_allocated['expo_wed']++;
  }
  if ($tickets[4944]) {
    $flags[] = '8';
    $tickets_allocated['expo_thu']++;
  }
  if ($tickets[4946]) {
    $flags[] = '9';
    $tickets_allocated['expo_fri']++;
  }

  return implode(' ', $flags);
}

/**
 * Return the user's special badge VIP string (if set)
 */
function register_export_badges_format_vip($account) {
  $profile = content_profile_load('profile', $account->uid);
  return $profile->field_profile_vip[0]['value'];
}

/*
 * Return the number of dinner tickets we need for this badge.
 *
 * Must check if any extras are bought and IF these extra allocees have other events too.
 */
function register_export_badges_format_dinners($account) {
  // Check if this user has bought additional dinner tickets that are assigned to users
  // who do NOT have other tickets assigned to them *or* dinner tickets that just haven't
  // been assigned at all.

  $dinner_tickets = 0;

  foreach ($account->orders as $order) {
    if ($order->nid == DINNER_TICKET_NID) {
      foreach ($order->tickets as $ticket) {
        if ($ticket->uid == $account->uid) {
          $dinner_tickets++;
        }
        else {
          // Does the uid have *any* other tickets assigned to them?
          //
          $query = "SELECT COUNT(uc_op.nid) AS num FROM {ccc_ticket_allocation} AS ta JOIN {uc_order_products} AS uc_op ON (ta.order_product_id = uc_op.order_product_id) JOIN {uc_orders} AS uc_o ON (uc_op.order_id = uc_o.order_id) WHERE ta.uid = %d AND uc_op.nid <> %d AND uc_o.order_status IN ('" . implode("', '", sessions_valid_order()) . "')";
          $num = db_result(db_query($query, $ticket->uid, DINNER_TICKET_NID));

          // If the uid we're looking at does NOT have any other tickets assigned to it, we need
          // to increment the number of dinner tickets for the $account->uid by one.
          // If it does have other tickets, it'll get allocated to the person themselves.
          //
          if (!$num) {
            $dinner_tickets++;
          }
        }
      }
    }
  }
  return $dinner_tickets;
}

/**
 * Theme function to CSV export data.
 */
function theme_register_badges($header, $data, $separator, $quote, $mime, $filename) {
  drupal_set_header('Content-type: ' . $mime);
  drupal_set_header('Content-Disposition: attachment; filename="' . $filename . '"');

  // Special handling when quoted values are involved.
  if ($quote == '"') {
    $wrap = '"';
    $replace_value = '""';
  }
  else {
    $wrap = '';
    $replace_value = '';
  }

  // Format header values.
  foreach ($header as $key => $value) {
    $header[$key] = $wrap . str_replace('"', $replace_value, decode_entities(strip_tags($value['data']))) . $wrap;
  }
  // Format row values.
  foreach ($data as $i => $values) {
    foreach ($values as $j => $value) {
      if (!is_numeric($data[$i][$j]))
        $data[$i][$j] = $wrap . str_replace('"', $replace_value, decode_entities(strip_tags($value))) . $wrap;
    }
  }

  $output = implode($separator, $header) . "\r\n";
  foreach ($data as $count => $row) {
    $output .= implode($separator, $row) . "\r\n";
  }

  return $output;
}

/**
 * Form to read a CVS file.
 */
function register_volunteer_csv() {
  drupal_set_message('TODO: Data verification step.');
  $form['invite'] = array(
    '#type' => 'fieldset',
    '#title' => 'Create Volunteers',
    '#description' => 'Upload a file with volunteer contact details and automatically create Drupal accounts for them.',
  );
  $form['invite']['explanation'] = array(
    '#type' => 'markup',
    '#value' => '<p>The CSV file must contain exactly 5 columns and the first row must not be headers.<p>The structure of the file is:<pre>Firstname,Surname,"Organisation",Position,Email</pre><p>If an email address is not valid, that volunteer will not be added.',
  );
  $form['invite']['file'] = array(
    '#type' => 'file',
    '#title' => 'Select CSV File',
    '#description' => 'Please select the properly formatted CSV file with volunteer details.',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Upload and Invite',
  );

  $form['#attributes'] = array('enctype' => "multipart/form-data");
  return $form;
}

function register_volunteer_csv_validate($form, &$form_state) {

  // dpm($form_state);

  $file = file_save_upload('file');
  if (!$file) {
    drupal_set_message('You must select a CSV file to upload.', 'error');
    form_set_error('file');
    return;
  }

  $fp = fopen($file->filepath, 'r');
  if ($fp) {
    $line = fgetcsv($fp);
    fclose($fp);
  } else {
    drupal_set_message('Unable to access uploaded file.', 'error');
    form_set_error('file');
    return;
  }

  if (count($line) != 5) {
    drupal_set_message('The uploaded file is not a valid CSV file.', 'error');
    form_set_error('file');
    return;
  }

}

function register_volunteer_csv_submit($form, &$form_state) {

  global $language;

  $file = file_save_upload('file');
  if (!$file) {
    drupal_set_message('Unable to access uploaded file.', 'error');
    form_set_error('file');
    return;
  }

  $fp = fopen($file->filepath, 'r');
  if (!$fp) {
    drupal_set_message('Unable to access uploaded file.', 'error');
    form_set_error('file');
    return;
  }

  $i = 0;
  while (!feof($fp)) {
    $i++;

    $data = array();
    $line = fgetcsv($fp);

    if (!count($line)) {
      // Last line will be empty...
      continue;
    }

    // User with this email?
    if (!valid_email_address($line[4])) {
      drupal_set_message(t('Invalid email adress "@mail" on line !num. Line skipped.', array('!num' => $i, '@mail' => $line[4])), 'warning');
      continue;
    }

    $params = array();

    $uid = db_result(db_query("SELECT uid FROM users WHERE LCASE(mail) = '%s'", strtolower(trim($line[4]))));
    if ($uid > 0) {
      $volunteer = user_load(array('uid' => $uid));
      $profile = content_profile_load('profile', $volunteer->uid);
    } else {
      $data['firstname'] = $line[0];
      $data['surname'] = $line[1];
      $data['organisation'] = $line[2];
      $data['position'] = $line[3];
      $data['mail'] = $line[4];

      $new_uid = proposal_copresenter_create($data);
      $volunteer = user_load(array('uid' => $new_uid));
      $profile = content_profile_load('profile', $volunteer->uid);
    }

    // Give the buggers the volunteer role.
    //
    $rid = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", 'volunteer'));
    $roles = $volunteer->roles + array($rid => 'volunteer');
    user_save($volunteer, array('roles' => $roles));

    drupal_set_message(t('Added volunteer role to @mail.', array('@mail' => $volunteer->mail)));

    if (variable_get('register_mail_volunteer_invite', 0)) {
      // Make email vars.
      //
      $params['!volunteer_firstname'] = $profile->field_profile_firstname[0]['value'];
      $params['!volunteer_surname'] = $profile->field_profile_surname[0]['value'];
      $params['!volunteer_lastname'] = $profile->field_profile_surname[0]['value'];
      $params['!volunteer_user'] = $volunteer->mail;
      $params['!volunteer_email'] = $volunteer->mail;

      // Email this user.
      drupal_mail('register', 'volunteer_invite', $volunteer->mail, $language, $params);

      // Message on screen.
      drupal_set_message(t('Sent notification to @firstname @surname &lt;@mail&gt;.', array('@firstname' => $profile->field_profile_firstname[0]['value'], '@surname' => $profile->field_profile_surname[0]['value'], '@mail' => $volunteer->mail)));
    }
  }
  fclose($fp);
}

/**
 * Implementation of hook_mail().
 */
function register_mail($key, &$message, $params) {

  if(empty($params['!login_url']))
     $params['!login_url'] = url('user', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!edit_url']))
     $params['!edit_url'] = url('user-profile', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site_url']))
     $params['!site_url'] = url('<front>', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site']))
     $params['!site'] = variable_get('site_name', '');
  $params['!site_name'] = $params['!site'];
  if(empty($params['!site_mail']))
     $params['!site_mail'] = variable_get('site_mail', '');

  switch ($key) {
    case 'volunteer_invite':
      $message['subject'] = strtr(variable_get('register_mail_volunteer_invite_subject'), $params);
      $message['body'][] = strtr(variable_get('register_mail_volunteer_invite_body'), $params);
      break;
    default:
      $message['subject'] = strtr(variable_get('register_mail_'. $key .'_subject'), $params);
      $message['body'][] = strtr(variable_get('registerster_export_badges_mail_'. $key .'_body'), $params);
  }
}

