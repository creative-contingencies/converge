<?php

/**
 * Implementation of hook_menu()
 */
function usersearch_menu() {
  $items = array();

  $items['admin/settings/usersearch'] = array(
    'title' => 'Usersearch Settings',
    'description' => 'Change settings for the usersearch module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usersearch_admin_settings'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/user/user/usersearch'] = array(
    'title' => 'Search users and profiles',
    'description' => 'Search users',
    'page callback' => 'usersearch_search_render_form',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/user/user/loginas/%'] = array(
    'title' => 'Login as...',
    'description' => 'Login as a different user',
    'page callback' => 'usersearch_loginas',
    'page arguments' => array(4),
    'access arguments' => array('change own username'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Display the settings form.
 */
function usersearch_admin_settings() {
  $form = array();

  $form['usersearch_defaults'] = array(
    '#title' => 'Defaults',
    '#description' => 'Set defaults for the user and profile search form.',
    '#type' => 'fieldset',
  );

  $form['usersearch_defaults']['usersearch_filter_collapse'] = array(
    '#title' => 'Collapse Filters',
    '#description' => 'Should the filters field be collapsed on the search page.',
    '#type' => 'radios',
    '#options' => array(
      0 => 'Not collapsed',
      1 => 'Collapsed',
    ),
    '#default_value' => variable_get('usersearch_filter_collapse', 0),
  );

  $form['usersearch_defaults']['usersearch_default_fields'] = array(
    '#title' => 'Default Fields',
    '#description' => 'Select any fields that you want to search for by default. The login name and email address fields are always searched.',
    '#type' => 'checkboxes',
    '#options' => usersearch_search_fields(),
    '#default_value' => variable_get('usersearch_default_fields', ''),
  );

  $form['usersearch_defaults']['roles'] = array(
    '#title' => 'Default Roles',
    '#description' => 'Select any roles you want limit results to.',
    '#type' => 'checkboxes',
    '#options' => user_roles(TRUE),
    '#default_value' => variable_get('usersearch_default_roles', ''),
  );

  return system_settings_form($form);
}

/**
 * Login as a different user.
 */
function usersearch_loginas($uid) {
  global $user;
  $new_user = user_load(array('uid' => $uid));

  if ($new_user->uid > 1) {
    drupal_set_message(t('You are now logged in as !user', array('!user' => $new_user->name)));
    $user = $new_user;
    drupal_goto('<front>');
  }
}

/**
 * User search form render helper.
 */
function usersearch_search_render_form() {
  return drupal_get_form('usersearch_search_form');
}

/**
 * Helper for custom user search.
 */
function usersearch_search_fields($keys_only = FALSE) {
  $query = "SELECT cnf.field_name, cnfi.label FROM {content_node_field} AS cnf LEFT JOIN {content_node_field_instance} AS cnfi USING(field_name) WHERE cnf.field_name LIKE 'field_profile_%' AND cnf.type='text' ORDER BY cnfi.weight ASC";
  $result = db_query($query);
  $fields = array();
  while ($object = db_fetch_object($result)) {
    if ($keys_only)
      $fields[] = $object->field_name;
    else
      $fields[$object->field_name] = $object->label;
  }
  return $fields;
}

/**
 * Custom user search.
 */
function usersearch_search_form($form_state) {

  $form['#redirect'] = FALSE;

  $form['usersearch']['string'] = array(
    '#type' => 'textfield',
    '#title' => 'Search',
    '#description' => 'Enter arbitrary text to search for.',
    '#default_value' => $form_state['values']['string'],
  );
  $form['usersearch']['filters'] = array(
    '#type' => 'fieldset',
    '#title' => 'Filters',
    '#description' => '',
    '#collapsible' => TRUE,
    '#collapsed' => (variable_get('usersearch_filter_collapse', 0) == 1) ? TRUE : FALSE,
  );
  $form['usersearch']['filters']['fields'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Search fields',
    '#description' => 'Check all the fields that you wish to search. The email address field is always searched.',
    '#options' => usersearch_search_fields(),
    // '#default_value' => usersearch_search_defaults($form_state, 'fields'),
  );
  $form['usersearch']['filters']['roles'] = array(
    '#type' => 'checkboxes',
    '#title' => 'User roles',
    '#description' => 'Check any roles you wish to limit results by.',
    '#options' => user_roles(TRUE),
  );

  // If the form was submitted, perform the search. Otherwise, enable default fields and roles.
  if ($form_state['submitted'] == TRUE) {
    $form['usersearch']['result'] = array(
      '#type' => 'markup',
      '#value' => usersearch_search_form_process($form_state),
    );
  } else {
    $form['usersearch']['filters']['fields']['#default_value'] = variable_get('usersearch_default_fields', '');
    $form['usersearch']['filters']['roles']['#default_value'] = variable_get('usersearch_default_roles', '');
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('List Users'),
  );

  return $form;
}

/**
 * Helper to regenerate selections for the form.
 */
function usersearch_search_defaults($form_state, $field) {
  $ret = array();

  // Loop through the submitted form data to see which fields need to be checked.
  if (isset($form_state['submitted'])) {
    foreach ($form_state['values'][$field] as $key => $val) {
      if ($val) {
        $ret[] = $val;
      }
    }
  } else {
    $ret = variable_get('usersearch_default_' . $field, '');
  }

  return $ret;
}

/**
 * Rebuild the form on submission.
 */
function usersearch_search_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/*(
 * Do the actual work, then retyurn a themed string.
 */
function usersearch_search_form_process($form_state) {
  global $user;

  // Parse fields.
  $fields = array();
  foreach ($form_state['values']['fields'] as $key => $val) {
    if ($val) {
      $fields[] = $key;
    }
  }

  // Parse roles.
  $roles = array();
  foreach ($form_state['values']['roles'] as $key => $val) {
    if ($val) {
      $roles[] = $key;
    }
  }

  // Only retrieve checked fields.
  // $query = "SELECT n.uid, u.mail, ctp." . implode('_value, ctp.', proposal_list_users_fields(TRUE) ) . "_value FROM {content_type_profile} AS ctp LEFT JOIN {node} AS n ON(ctp.nid=n.nid) LEFT JOIN {users} AS u ON(n.uid=u.uid) LEFT JOIN {users_roles} AS ur ON(u.uid=ur.uid) WHERE u.mail LIKE '%%%s%%'";
  $query = "SELECT DISTINCT(n.uid), u.mail, ctp." . implode('_value, ctp.', $fields) . "_value, u.access FROM {content_type_profile} AS ctp LEFT JOIN {node} AS n ON(ctp.nid=n.nid) LEFT JOIN {users} AS u ON(n.uid=u.uid) LEFT JOIN {users_roles} AS ur ON(u.uid=ur.uid) WHERE (u.mail LIKE '%%%s%%'";
  $args = array($form_state['values']['string']);

  // foreach $field add an OR.
  foreach ($fields as $f) {
    $query .= " OR ctp." . $f . "_value LIKE '%%%s%%'";
    $args[] = $form_state['values']['string'];
  }

  if (count($roles)) {
    $query .= ') AND ur.rid IN(' . implode(',', $roles) . ')';
  } else {
    $query .= ')';
  }
  $result = db_query($query, $args);

  // Turn some of the result fields into links.
  $data = array();
  while ($row = db_fetch_array($result)) {
    $row['mail'] = l($row['mail'], 'user/' . $row['uid']);
    if (in_array('papers chair', $user->roles) || user_access('change own username')) {
      $row['access'] = t('!interval ago', array('!interval' => format_interval(time() - $row['access'])));
      $row[] = l('contact', 'user/' . $row[uid] . '/contact', array('query' => array('contact_author' => 'true')));
      $row[] = l('invite', 'user/' . $row[uid] . '/contact', array('query' => array('invite_reviewer' => 'true')));
    }
    // This one last, as we may need it.
    if (user_access('change own username')) {
      $row['uid'] = l($row['uid'], 'admin/user/user/loginas/' . $row['uid']);
    }
    $data[] = $row;
  }

  // Make a pretty table header.
  $header = array('ID', 'Email');
  $all_fields = usersearch_search_fields();
  foreach ($fields as $f) {
    $header[] = $all_fields[$f];
  }

  // Adn add some extra links
  if (in_array('papers chair', $user->roles) || user_access('change own username')) {
    $header[] = 'Last access';
    $header[] = 'Presenter';
    $header[] = 'Reviewer';
  }

  return theme('table', $header, $data);
}
