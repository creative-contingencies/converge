<?php
/**
 * Implements hook_menu()
 */
function register_menu() {
  $items['admin/converge/register'] = array(
    'title' => 'Registration Settings',
    'description' => 'Change configuration for Registration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('register_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer all signups'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['myacec'] = array(
    'title' => 'myACEC',
    'page callback' => 'register_user_profile_goto',
    'access callback' => 'user_access',
    'access arguments' => array('edit own profile content'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Implements hook_init()
 */
function register_init() {
  drupal_add_js(drupal_get_path('module', 'register') .'/register.js', 'header');
}

/**
 * Implements hook_cron
 */
function register_cron() {
  if (variable_get('register_profile_fix', 0)) {
    register_profile_fix();
  }
}

/**
 * Create the settings form for this module.
 */
function register_admin_settings() {
  $form['register_profile_fix'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create missing profile nodes on cron run.'),
    '#decription' => t('Use signup information to create content profile nodes for registered users when cron runs.'),
    '#default_value' => variable_get('register_profile_fix', 0),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_user()
 */
function register_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'view') {
    // Hide the core profile fields.
    unset($account->profile_firstname);
    unset($account->profile_surname);
    unset($account->content['Name']);
  }
}

/**
 * Bounce users at their proile edit page.
 */
function register_user_profile_goto() {
  if ($GLOBALS['user']->uid) {
    drupal_goto('user/' . $GLOBALS['user']->uid . '/profile/profile' );
  }
  else {
    return drupal_access_denied();
  }
}

/**
 * Does this work in a module?
 */
function register_preprocess_page(&$vars, $hook) {
  if($hook == 'page' && arg(0) == 'user') {
    _register_removetab('Account', $vars);
    _register_removetab('Name', $vars);
  }
}

/**
 * Helper to remove tabs.
 */
function _register_removetab($label, &$vars) {
  $tabs = explode("\n", $vars['tabs']);
  $vars['tabs'] = '';

  foreach($tabs as $tab) {
    if(strpos($tab, '>' . $label . '<') === FALSE) {
      $vars['tabs'] .= $tab . "\n";
    }
  }
}

/**
 * Implements hook_form_alter()
 */
function register_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'uc_signup_attendees_form') {
    // Build an array keyed on email addresses
    foreach ($form_state['storage']['uc_signup']['nids'] as $nid => $attendees) {
      if (!in_array($nid, $nodes)) {
        // Prepare node obejcts so we can display date information.
        $nodes[$nid] = node_load($nid);
      }
      foreach ($attendees as $key => $mail) {
        if (user_is_logged_in() && !user_access('purchase signups for other users')) {
          $mail = $user->mail;
        }
        if (is_numeric($nid)) {
          $mails[$mail][] = $nid;
        }
      }
    }

    // Remove descriptions from profile fields.
    foreach ($mails as $mail => $events) {
      foreach ($form[$mail]['profile'] as $group => $fields) {
        foreach ($fields as $key => $value) {
          if (is_array($form[$mail]['profile'][$group][$key])) {
            $form[$mail]['profile'][$group][$key]['#description'] = '';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_order()
 */
function register_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'submit':
      register_order_prepare($arg1);
      break;
  }
}

/**
 * Turn newly created user's profiles into content_profile nodes.
 */
function register_order_prepare(&$order) {
  if (empty($order->products)) {
    return;
  }
  foreach ($order->products as $product) {
    if (isset($product->data['uc_signup_enabled']) && $product->data['uc_signup_enabled'] == 1) {
      $events_to_signup[$product->nid] = $product;
    }
  }

  if (empty($events_to_signup)) {
    return;
  }

  foreach ($_SESSION['uc_signup']['nids'] as $nid => $attendees) {
    if (!isset($events_to_signup[$nid])) {
      continue;
    }
    foreach ($attendees as $key => $mail) {
      $account = user_load(array('mail' => $mail));

      $profile = new stdClass();
      $profile->type = 'profile';

      // If the user has a profile node already, skip.
      if (!empty($account->uid) && content_profile_profile_exists($profile, $account->uid)) {
        continue;
      }

      $profile->nid = NULL;
      $profile->vid = NULL;
      $profile->title = NULL;
      $profile->body = NULL;
      $profile->uid = $account->uid;
      $profile->field_profile_firstname = array(0 => array('value' => $account->profile_firstname));
      $profile->field_profile_surname = array(0 => array('value' => $account->profile_surname));

      node_save($profile);
    }
  }
}

/**
 * Implementation of hook_views_api().
 */
function register_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'register') .'/views',
  );
}

/**
 * Check a user for a highest role that needs to be printed on their badge.
 */
function register_export_badges_format_roles($account, $tickets = array()) {

  $result = db_query("SELECT nid FROM {signup_log} AS sl LEFT JOIN {uc_signup_log} AS ucsl USING(sid) WHERE sl.uid = %d AND ucsl.type = 1", $account->uid);
  while ($nid = db_result($result)) {
    $tickets[$nid] = $nid;
  }

  if (in_array('keynote', $account->roles))
    return 'KEYNOTE';

  if (in_array('acce board', $account->roles))
    return 'ACCE';

  if (in_array('ictev board', $account->roles))
    return 'ICTEV';

  if (in_array('site administrator', $account->roles))
    return 'ORGANISER';

  if (in_array('organiser', $account->roles))
    return 'ORGANISER';

  if (in_array('papers chair', $account->roles))
    return 'ORGANISER';

  if (in_array('sponsor', $account->roles))
    return 'SPONSOR';

  // Is this person a speaker?
  //
  $query = "
SELECT
  COUNT(DISTINCT(cfpp.field_proposal_presenters_uid)) AS num FROM
  {content_field_proposal_presenters} AS cfpp
LEFT JOIN
  {content_type_proposal} AS ctp ON (ctp.nid = cfpp.nid)
WHERE
    ctp.field_proposal_status_value IN ('" . implode("','", sessions_valid_status()) . "')
  AND
    cfpp.field_proposal_presenters_uid = %d";
  $presenter = db_result(db_query($query, $account->uid));

  if ($presenter) {
    $rid = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", 'presenter'));
    $roles = $account->roles + array($rid => 'presenter');
    user_save($account, array('roles' => $roles));
    return 'PRESENTER';
  }

  if (in_array('volunteer', $account->roles))
    return 'VOLUNTEER';

  if (count($tickets) == 1 && !empty($tickets[36])) {
    return 'DINNER ONLY';
  }

  $badge = array();
  foreach ($tickets as $ticket) {
    if ($ticket == 150 || $ticket == 174)
      $badge[] = 'WEDNESDAY';
    if ($ticket == 151 || $ticket == 175)
      $badge[] = 'THURSDAY';
    if ($ticket == 152 || $ticket == 176)
      $badge[] = 'FRIDAY';
  }

  if (!empty($badge)) {
    return implode(', ', $badge);
  }

  if (in_array('attendee', $account->roles))
    return '';

  if (in_array('delegate', $account->roles))
    return '';

  return '';
}

/**
 * Check a user for dinner.
 */
function register_export_badges_format_dinner($account) {
  $result = db_result(db_query("SELECT COUNT(sl.nid) FROM {signup_log} AS sl LEFT JOIN {uc_signup_log} AS ucsl USING(sid) WHERE sl.uid = %d AND ucsl.type = 1 AND sl.nid = 36", $account->uid));
  
  return ($result != 0) ? t('Yes') : t('No');
}

/**
 * Check a user for extra stuff they'll be attending.
 */
function register_export_badges_format_extra($account) {
  $result = db_query("SELECT sl.nid, n.title FROM {signup_log} AS sl LEFT JOIN {uc_signup_log} AS ucsl USING(sid) LEFT JOIN {node} AS n USING(nid) WHERE sl.uid = %d AND ucsl.type = 1 ORDER BY n.nid ASC", $account->uid);
  while ($row = db_fetch_object($result)) {
    $tickets[$row->nid] = $row->title;
  }

  return implode(', ', $tickets);
}

/**
 * Helper that creates profiles for registered users (with a signup)
 * that do not yet have one.
 *
 * @return
 *   An array of notification strings.
 */
function register_profile_fix() {
  $statuses = array();
  $message = 'Created a new profile for @firstname @lastname';

  $users = db_query("SELECT DISTINCT uid FROM {uc_signup_log} sl WHERE type = 1 AND uid NOT IN (SELECT uid FROM {node} WHERE type = 'profile')");

  while ($uid = db_result($users)) {
    // Double check.
    $profile = content_profile_load('profile', $uid);   
    if (empty($profile) || empty($profile->nid)) {
      $firstname = db_result(db_query("SELECT value FROM {profile_values} WHERE fid = 1 AND uid = %d", $uid));
      $lastname = db_result(db_query("SELECT value FROM {profile_values} WHERE fid = 2 AND uid = %d", $uid));

      // Create a profile for the user.
      $profile = new StdClass();

      $profile->type = 'profile';
      $profile->nid = NULL;
      $profile->vid = NULL;
      $profile->title = NULL;
      $profile->body = NULL;
      $profile->uid = $uid;
      $profile->field_profile_firstname = array(0 => array('value' => $firstname));
      $profile->field_profile_surname = array(0 => array('value' => $lastname));

      node_save($profile);

      watchdog('register', $message,  array('@firstname' => $firstname, '@lastname' => $lastname),  WATCHDOG_INFO, l(t('view profile'), 'node/' . $profile->nid));
      $statuses[] = t($message, array('@firstname' => $firstname, '@lastname' => $lastname));
    }
  }
  return $statuses;
}
