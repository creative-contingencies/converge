<?php

/**
 * Implementation of hook_menu().
 */
function article_menu() {
  $items = array();

  // Admin page.
  $items['admin/converge/article'] = array(
    'title' => 'Article Settings',
    'description' => 'Change configuration and email templates for Articles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('article_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Handlers to export articles as CSV.
  $items['article/export/csv/all'] = array(
    'title' => 'All articles',
    'description' => 'Export all articles',
    'page callback' => 'article_export_csv',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('export articles'),
    'type' => MENU_CALLBACK,
  );
  $items['article/export/csv/refereed'] = array(
    'title' => 'All articles',
    'description' => 'Export all articles',
    'page callback' => 'article_export_csv',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('export articles'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter()
 */
function article_menu_alter(&$items) {
  // Override the access handler for article node creation.
  $items['node/add/article']['access callback'] = 'article_access';
  unset($items['node/add/article']['access arguments']);
}

function article_admin_settings() {

  $form['article_c4p'] = array(
    '#type' => 'fieldset',
    '#title' => 'Call for Articles',
    '#description' => t('General call for articles settings.'),
  );

  // Is the call for articles open or not.
  $form['article_c4p']['article_c4p_open'] = array(
    '#type' => 'select',
    '#title' => 'Call for Articles',
    '#options' => array(
      0 => 'Closed',
      1 => 'Open',
    ),
    '#description' => t('Is the call for articles open or closed?'),
    '#default_value' => variable_get('article_c4p_open', 0),
  );

  // If not open, is the form enabled to accept backup articles?
  $form['article_c4p']['article_c4p_backup'] = array(
    '#type' => 'select',
    '#title' => 'Call for Articles Form',
    '#options' => array(
      0 => 'Disabled',
      1 => 'Open to accept waiting list articles',
    ),
    '#description' => t('Should the article submission form remain accessible and accept submissions to be wait-listed.'),
    '#default_value' => variable_get('article_c4p_backup', 0),
  );

  // Taxonomy settings.
  $form['article_taxonomy'] = array(
    '#type' => 'fieldset',
    '#title' => 'Article Vocabularies',
    '#description' => t('Define which vocabularies are used by the article content type.'),
  );

  // Grab list of vocabularies.
  $vocabularies = taxonomy_get_vocabularies('article');
  // And munge them into an option list.
  $options = array();
  foreach($vocabularies as $i => $v) {
    $options[$i] = $v->name;
  }

  $form['article_taxonomy']['article_vocabulary_kind'] = array(
    '#title' => t('Kind'),
    '#description' => t('The vocabulary that contains the <em>kind</em> of article.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('article_vocabulary_kind', 0),
  );

  $form['article_taxonomy']['article_vocabulary_category'] = array(
    '#title' => t('Category'),
    '#description' => t('The vocabulary that contains the article <em>category</em>.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('article_vocabulary_category', 0),
  );

  $form['article_taxonomy']['article_vocabulary_keywords'] = array(
    '#title' => t('Keywords'),
    '#description' => t('The vocabulary that contains the article <em>keywords</em>.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('article_vocabulary_keywords', 0),
  );

  $form['article_chair']['article_chair_rid'] = array(
    '#title' => t('Chair'),
    '#description' => t('The user role that defines the paper committee chairperson(s).'),
    '#type' => 'select',
    '#options' => user_roles(TRUE),
    '#default_value' => variable_get('article_chair_rid', 0),
  );

  $form['article_new_user_notify'] = array(
    '#type' => 'fieldset',
    '#title' => 'New User Account Notification',
    '#description' => t('Choose whether or not a user is notified of an account that is created via the article submission form.'),
  );
  $form['article_new_user_notify']['article_mail_article_new_user_notify_send'] = array(
    '#title' => t('Send notification to user'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification emails.'),
      t('Send notification emails.')
    ),
    '#default_value' => variable_get('article_mail_article_new_user_notify_send', 1),
  );
  $form['article_new_user_notify']['article_mail_article_new_user_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('article_mail_article_new_user_notify_subject', ''),
  );
  $form['article_new_user_notify']['article_mail_article_new_user_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('article_mail_article_new_user_notify_body', ''),
    '#rows' => 16,
  );
  $form['article_new_user_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !username, !email, !password, !login_url, !site, !site_url, !site_mail'),
  );

  // Configure email: new article -> user
  $form['article_notify_user'] = array(
    '#type' => 'fieldset',
    '#title' => 'New Article Confirmation',
    '#description' => t('Choose whether or not a user is sent a confirmation after submitting a article.'),
  );
  $form['article_notify_user']['article_mail_article_notify_user_send'] = array(
    '#title' => t('Send confirmation to user'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send confirmation emails.'),
      t('Send confirmation emails.')
    ),
    '#default_value' => variable_get('article_mail_article_notify_user_send', 1),
  );
  $form['article_notify_user']['article_mail_article_notify_user_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('article_mail_article_notify_user_subject', ''),
  );
  $form['article_notify_user']['article_mail_article_notify_user_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('article_mail_article_notify_user_body', ''),
    '#rows' => 16,
  );
  $form['article_notify_user']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !username, !email, !firstname, !surname, !organisation, !position, !phone, !address, !city, !state, !postcode, !country, !title, !abstract, !kind, !category, !keywords, !add_url, !login_url, !site, !site_url, !site_mail'),
  );

  // Configure email: new article -> admin
  $form['article_notify_admin'] = array(
    '#type' => 'fieldset',
    '#title' => 'Site Administrator Notification',
    '#description' => t('Choose whether or not a user is notified of an account that is created via the article submission form.'),
  );
  $form['article_notify_admin']['article_mail_article_notify_admin_send'] = array(
    '#title' => t('Send notification to paper chairperson(s)'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification emails.'),
      t('Send notification emails.')
    ),
    '#default_value' => variable_get('article_mail_article_notify_admin_send', 1),
  );
  $form['article_notify_admin']['article_mail_article_notify_admin_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('article_mail_article_notify_admin_subject', ''),
  );
  $form['article_notify_admin']['article_mail_article_notify_admin_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('article_mail_article_notify_admin_body', ''),
    '#rows' => 16,
  );
  $form['article_notify_admin']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !username, !email, !title, !abstract, !add_url, !login_url, !site, !site_url, !site_mail'),
  );

  // Configure email: add presenter via magic url -> submitter
  $form['presenter_add_notify'] = array(
    '#type' => 'fieldset',
    '#title' => ' Presenter Add Notification',
    '#description' => t('Choose whether or not a article author is notified when a presenter is added to the article.'),
  );
  $form['presenter_add_notify']['article_mail_presenter_add_notify_send'] = array(
    '#title' => t('Send notification to article author'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('article_mail_presenter_add_notify_send', 1),
  );
  $form['presenter_add_notify']['article_mail_presenter_add_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('article_mail_presenter_add_notify_subject', ''),
  );
  $form['presenter_add_notify']['article_mail_presenter_add_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('article_mail_presenter_add_notify_body', ''),
    '#rows' => 16,
  );
  $form['presenter_add_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !username, !email, !author, !authoremail, !title, !abstract, !remove_url, !login_url, !site, !site_url, !site_mail'),
  );

  // Configure email: add presenter via magic url -> submitter
  $form['copresenter_add_notify'] = array(
    '#type' => 'fieldset',
    '#title' => ' Co-Presenter Add Notification',
    '#description' => t('Choose whether or not a article co-presenter is notified when a they are added to the article.'),
  );
  $form['copresenter_add_notify']['article_mail_copresenter_add_notify_send'] = array(
    '#title' => t('Send notification to article co-presenter'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('article_mail_copresenter_add_notify_send', 1),
  );
  $form['copresenter_add_notify']['article_mail_copresenter_add_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('article_mail_copresenter_add_notify_subject', ''),
  );
  $form['copresenter_add_notify']['article_mail_copresenter_add_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('article_mail_copresenter_add_notify_body', ''),
    '#rows' => 16,
  );
  $form['copresenter_add_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !username, !email, !author, !authoremail, !url, !title, !abstract, !remove_url, !login_url, !site, !site_url, !site_mail'),
  );

  return system_settings_form($form);
}

/*
 * Implementation of hook_form_alter()
 *
 * Insert fields that allow user creation when the form is submitted.
 */
function article_form_alter(&$form, $form_state, $form_id) {
  global $user;

  if ($form_id == 'user_login') {
    $form['name']['#title'] = t('Email address');
    $form['name']['#description'] = t('Enter your email address.');
  }

  // Do not display the teaser break check box.
  unset($form['body_field']['teaser_js']);
  unset($form['body_field']['teaser_include']);

  if ($form_id == 'article_node_form') {

    // Relabel 'taxonomy' as something else.
    $form['taxonomy']['#title'] = t('Session Details');

    // Hide the stream taxonomy if you're not an admin or papers chair.
    if (!in_array('site administrator', $user->roles) || !in_array('papers chair',$user->roles) || $user->uid != 1) {
      $js = "
        $(document).ready(function() {
          $('#edit-taxonomy-10-wrapper').hide();
        });";
      drupal_add_js($js, 'inline');
    }

    if ((variable_get('article_c4p_open', 0) == 0) && !$form['title']['#default_value']) {
      drupal_set_message(t('The call for articles has closed. Your submission will be added to a waiting list.'), 'warning');
    }

    $form['body_field']['body']['#required'] = TRUE;

    if (empty($form['#node']->nid) && user_is_anonymous()) {
      // Ask for user info on anonymous submission.
      $form['user'] = array(
        '#type' => 'fieldset',
        '#title' => t('Your Details'),
        '#description' => t('First, please enter your contact details. These details will be used to create a login for you on !site. You will need these details later to access your article submission and to register for the conference.', array('!site' => variable_get('site_name', ''))),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => -100,
      );

      $form['user']['register'] = user_register();
      $form['user']['register']['#tree'] = TRUE;
      if (module_exists('logintoboggan')) {
        $form['user']['register']['name']['#access'] = FALSE;
      }
      unset($form['user']['register']['destination']);
      unset($form['user']['register']['submit']);

      if (module_exists('content_profile')) {
        $form['user']['profile'] = article_user_profile_form();
        $form['user']['profile']['#tree'] = TRUE;
      }

      // Perform some extra validation steps.
      array_unshift($form['#validate'], 'article_node_form_validate');
      $form['#validate'][] = 'article_user_profile_form_validate';

      // Patch in account and profile creation.
      array_unshift($form['#submit'], 'article_node_form_submit');
  
      // Redirect to the user dashboard when submission is done.
      $form['#redirect'] = url('user', array('absolute' => TRUE));
    } // endif empty($form['#node']->nid) && user_is_anonymous()

    else if (empty($form['#node']->nid) && user_is_logged_in() && isset($_SESSION['article_node_form_state_values'])) {
      $values = unserialize($_SESSION['article_node_form_state_values']);
      unset($_SESSION['article_node_form_state_values']);

      $form['title']['#default_value'] = $values['title'];
      $form['body_field']['body']['#default_value'] = $values['body'];

      foreach($values['taxonomy'] as $taxonomy => $value) {
        $multi_taxonomy_counter = 0;
        if(!is_array($value)) {
          $form['taxonomy'][$taxonomy]['#default_value'] = $value;
        }
        else {
          $tags = array();
          $multi_taxonomy_counter++;
          foreach($value as $key => $val) {
            $tags[] = $val;
          }
          $form['taxonomy'][$taxonomy][$multi_taxonomy_counter]['#default_value'] = implode(', ', $tags);
        }
      }
      // And the rest...
      foreach ($values as $key => $val) {
        if (isset($form[$key]) && is_array($form[$key]) && !is_array($val)) {
          $form[$key]['#default_value'] = $val;
        }
      }

      // Redirect to the user dashboard when submission is done.
      // $form['#redirect'] = url('user', array('absolute' => TRUE));
    } // end elseif

    // Hide the 'presenters' userreference field.
    $form['field_article_presenters']['#access'] = FALSE;
    $form['field_article_copresenters']['field_article_copresenters_add_more']['#value'] = t('Add another co-presenter');
    $form['#validate'][] = 'article_node_form_copresenters_validate';
  } // end if form_id node_article_form
}

/*
 * Implementation of hook_form_validate()
 *
 * Check that the fields inserted by hook_form_alter() contain valid data.
 */
function article_node_form_validate($form, &$form_state) {
  // If we have a saved form_state, delete it.
  if(isset($_SESSION['article_node_form_state_values'])) {
    unset($_SESSION['article_node_form_state_values']);
  }

  $account = user_load(array('mail' => $form_state['values']['register']['mail']));
  if (!empty($account)) {
    drupal_set_message(t('The email address %mail is already in use. Please !login first. After login, you will be redirected to this page', array('%mail' => $form_state['values']['register']['mail'], '!login' => l('login', 'user', array('query' => drupal_get_destination())))), 'warning');
    form_set_error('mail', '');
    $_SESSION['article_node_form_state_values'] = serialize($form_state['values']);
  }

  if (!valid_email_address($form_state['values']['register']['mail'])) {
    form_set_error('mail', t('You must enter a valid email address.'));
  }
  if(strpos(strtolower($form_state['values']['register']['mail']), 'edumail.edu.au') !== FALSE) {
    form_set_error('mail', t('You must enter a valid email address. Edumail addresses should end in .gov.edu.au.'));
  }

  if (module_exists('logintoboggan')) {
    $num = variable_get('logintoboggan_minimum_password_length', 0);
    if (!empty($num) && strlen($form_state['values']['register']['pass']) < $num) {
      form_set_error('pass', t('The password is too short: it must be at least %num characters.', array('%num' => $num)));
    }
  }
}

/**
 * Check the co-presenter fields.
 */
function article_node_form_copresenters_validate($form, &$form_state) {
  // Check what's in the co-presenter fields.
  foreach ($form_state['values']['field_article_copresenters'] as $field) {
    if (is_array($field) && !empty($field['value']) && !valid_email_address($field['value'])) {
      form_set_error($field['_error_element'], t('%mail is not a valid email address.', array('%mail' => $field['value'])));
    }
  }
}

/*
 * Implementation of hook_form_submit()
 *
 * Process the field added by hook_form_alter() and create a user, then log
 * this user in.
 */
 
function article_node_form_submit($form, &$form_state) {

  global $language;

  // If we check here, we can never accidentally log the user out.
  if (empty($form['#node']->nid) && user_is_anonymous()) {

    // Need to be able to be user #1 and to login.
    global $user;

    // Save the form state.
    $saved_state = $form_state;

    $form_state['values'] = $saved_state['values']['register'];
    $form_state['values']['op'] = t('Create new account');
    $form_state['values']['pass1'] = $form_state['values']['pass2'] = $saved_state['values']['register']['pass'];
    $form_state['values']['notify'] = 1;

     // If logintoboggan, hide the username.
    if (module_exists('logintoboggan')) {
      $form_state['values']['name'] = $saved_state['values']['user']['mail'];
    }

    // Mush in the profile!
    $form_state['values']['type'] = 'profile';
    foreach ($saved_state['values']['profile'] as $field => $value) {
      $form_state['values'][$field] = $value;
    }

    // Generate the new user as user 1. Then switch.
    session_save_session(FALSE);
    $user = user_load(1);
    drupal_execute('user_register', $form_state);
    $account = $form_state['user'];
    session_save_session(TRUE);
    $user = $account;
    
    // Switch back to the article form state, add the new user account to it.
    $form_state = $saved_state;
    $form_state['account'] = $user;

    // Set the new user as owner of this article.
    $form_state['values']['uid'] = $user->uid;

    // Add the new user as presenters[0] in this article.
    $form_state['values']['field_article_presenters'][0]['uid'] = $user->uid;

    // If we have a newsletter, subscribe the user.
    //
    if (module_exists('simplenews') && ($tid = variable_get('register_newsletter_tid', 0))) {
      simplenews_subscribe_user($user->mail, $tid, FALSE);
    }

    // Login as this new user.
    user_authenticate_finalize(&$user);

  } // endif uid
}

/**
 * Implementation of hook_nodeapi().
 * Send emails when new articles are created.
 */
function article_nodeapi(&$node, $op, $a1) {
  if($node->type != 'article')
    return;

  global $user;
  global $language;

  // Munge the user profile into the params array (win!)
  $params = article_content_profile_vars('profile', $author->uid);

  switch ($op) {
    case 'insert':
      // If this is a transpose of a REJECTED article, don't send the emails.
      //
      if($node->field_article_status[0]['value'] == 'rejected')
        break;

      // Prepare and send e-mail to user.
      $params['!username'] = $user->name;
      $params['!email'] = $user->mail;

      $params['!url'] = url('node/' . $node->nid, array('absolute' => TRUE, 'alias' => TRUE));
      $params['!url-alias'] = url('node/' . $node->nid, array('absolute' => TRUE));
      $params['!title'] = $node->title;
      $params['!abstract'] = $node->body;

      // Grab the taxonomies too.
      $terms = taxonomy_node_get_terms_by_vocabulary($node, variable_get('article_vocabulary_kind', 0));
      foreach($terms as $tid => $term) {
        $kind[] = $term->name;
      }
      $params['!kind'] = implode(', ', $kind);

      $terms = taxonomy_node_get_terms_by_vocabulary($node, variable_get('article_vocabulary_category', 0));
      foreach($terms as $tid => $term) {
        $category[] = $term->name;
      }
      $params['!category'] = implode(', ', $category);

      $terms = taxonomy_node_get_terms_by_vocabulary($node, variable_get('article_vocabulary_keywords', 0));
      foreach($terms as $tid => $term) {
        $keywords[] = $term->name;
      }
      $params['!keywords'] = is_array($keywords) ? implode(', ', $keywords) : '';

      if (variable_get('article_mail_article_notify_user_send', 0)) {
        drupal_mail('article', 'notify_user', $user->mail, $language, $params);
        drupal_set_message(t('A confirmation e-mail with the article details has been sent to @email.', array('@email' => $user->mail)));
      }
      if (variable_get('article_mail_article_notify_admin_send', 0)) {
        // Send mail to all 'chair' role users.
        $result = db_query("SELECT u.mail FROM {users_roles} AS ur LEFT JOIN {users} AS u ON (u.uid=ur.uid) WHERE ur.rid=%d", variable_get('article_chair_rid', 0));
        while($o = db_fetch_object($result)) {
          drupal_mail('article', 'notify_admin', $o->mail, $language, $params);
        }
      }
      article_fix_copresenters($node);
      break;

    case 'presave':
      // Munge copresenter strings into actual users.
      article_fix_copresenters($node);
      break;
  }
}

/**
 * Implementation of hook_mail().
 */
function article_mail($key, &$message, $params) {

  if(empty($params['!login_url']))
     $params['!login_url'] = url('user', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!edit_url']))
     $params['!edit_url'] = url('user-profile', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site_url']))
     $params['!site_url'] = url('<front>', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site']))
     $params['!site'] = variable_get('site_name', '');
  $params['!site_name'] = $params['!site'];
  if(empty($params['!site_mail']))
     $params['!site_mail'] = variable_get('site_mail', '');

  switch ($key) {
    case 'new_user_notify':
      $message['subject'] = strtr(variable_get('article_mail_article_new_user_notify_subject', ''), $params);
      $message['body'][] = strtr(variable_get('article_mail_article_new_user_notify_body', ''), $params);
      break;
    case 'notify_user':
      $message['subject'] = strtr(variable_get('article_mail_article_notify_user_subject', ''), $params);
      $message['body'][] = strtr(variable_get('article_mail_article_notify_user_body', ''), $params);
      break;
    case 'notify_admin':
      $message['subject'] = strtr(variable_get('article_mail_article_notify_admin_subject', ''), $params);
      $message['body'][] = strtr(variable_get('article_mail_article_notify_admin_body', ''), $params);
      break;
    case 'presenter_add_notify':
      $message['subject'] = strtr(variable_get('article_mail_presenter_add_notify_subject', ''), $params);
      $message['body'][] = strtr(variable_get('article_mail_presenter_add_notify_body', ''), $params);
      break;
    case 'copresenter_add_notify':
      $message['subject'] = strtr(variable_get('article_mail_copresenter_add_notify_subject', ''), $params);
      $message['body'][] = strtr(variable_get('article_mail_copresenter_add_notify_body', ''), $params);
      break;
    default:
      $message['subject'] = strtr(variable_get('article_mail_'. $key .'_subject', ''), $params);
      $message['body'][] = strtr(variable_get('article_mail_'. $key .'_body', ''), $params);
  }
}

/**
 * Implementation of hook_perm()
 */
function article_perm() {
  return array("export articles");
}

/**
 * Helper that translates copresenters.
 */
function article_fix_copresenters(&$node) {
  global $user;

  // Owner is always co-presenter 0. If not yet set, we'll make it be user 1.
  $node->field_article_presenters[0]['uid'] = ($node->uid) ? $node->uid : 1;

  foreach ($node->field_article_copresenters as $num => $field) {
    if (!is_array($field))
      continue;

    // No value means remove the user.
    if (empty($field['value'])) {
      unset($node->field_article_presenters[($num + 1)]);
    }
    else {
      // Check if the given email address is associated with an account.
      $account = user_load(array('mail' => $field['value']));
      if (empty($account->uid)) {

        // Turn the email address into a name (for the profile).
        $name = substr($field['value'], 0, strpos($field['value'], '@'));
        if (strpos($name, '.') !== FALSE) {
          $firstname = substr($name, 0, strpos($name, '.'));
          $surname = substr($name, strpos($name, '.')+1);
        }
        else {
          $firstname = substr($field['value'], 0, strpos($field['value'], '@'));
          $surname = substr($field['value'], strpos($field['value'], '@')+1);
          $surname = substr($surname, 0, strpos($surname, '.'));
        }

        // Create the new user.
        $random_password = user_password(8);
        $form_state['values']['mail'] = $field['value'];
        $form_state['values']['name'] = $field['value'];
        $form_state['values']['op'] = t('Create new account');
        $form_state['values']['pass'] = $random_password;
        $form_state['values']['pass1'] = $random_password;
        $form_state['values']['pass2'] = $random_password;
        $form_state['values']['notify'] = 1;
        $form_state['values']['field_profile_firstname'] = array(array('value' => $firstname));
        $form_state['values']['field_profile_surname'] = array(array('value' => $surname));

        // Switch to user 1 and submit the user_register form.
        global $user;
        $whoami = $user;

        session_save_session(FALSE);
        $user = user_load(1);
        drupal_execute('user_register', $form_state);
        $errors = form_get_errors();
        session_save_session(TRUE);

        if (!empty($errors)) {
          drupal_set_message(t('Unable to crete a new account for %mail', array('%mail' => $form_state['values']['mail'])), 'error');
          foreach ($errors as $key => $val) {
            drupal_set_message($val, 'error');
          }
        }

        $user = $whoami;
        $account = $form_state['user'];
      }

      // Disallow duplicates, so loop through what's already set.
      // This should probably be a helper function that returns a boolean.
      $skip = FALSE;
      foreach ($node->field_article_presenters as $presenter) {
        if ($presenter['uid'] == $account->uid) {
          $skip = TRUE;
        }
      }
      if ($skip == FALSE) {
        $node->field_article_presenters[($num + 1)] = array('uid' => $account->uid);
      }
    }
  }

}

/**
 * Helper that controls access to the article create form.
 */
function article_access() {
  // Definitely not if the user can't create article nodes.
  if (!node_access('create', 'article'))
    return FALSE;

  // if the c4p form is open or we are user 1, then yes.
  if (variable_get('article_c4p_open', 0) == 1 || $GLOBALS['user']->uid == 1)
    return TRUE;

  // Otherwise no.
  return FALSE;
}

/**
 * Helper to turn content_profile fields into subst vars.
 */
function article_content_profile_vars($type, $uid) {
  $params = array();

  $pattern = '/^field_' . $type . '_(?<name>.*)$/';

  $profile = content_profile_load($type, $uid);

  if(!$profile)
    return null;
  // $profile = content_profile_load($type, 0);

  foreach($profile as $key => $val) {
    $r = preg_match($pattern, $key, $matches);
    if($r && !empty($matches['name']))
      $params['!' . $matches['name']] = $val[0]['value'];
  }
  return $params;
}

/**
 * Helper to return a list of article NIDs for a given user.
 */
function article_user_list($author) {
  $list = array();
  $result = db_query("SELECT nid FROM {node} WHERE uid=%d AND type='%s'", $author, 'article');
  while($o = db_fetch_object($result)) {
    $list[] = $o->nid;
  }
  return $list;
}

/**
 * Helper to create a new account based on only an email address and an optional name.
 */
function article_copresenter_create($params) {

  // Generate a new random password.
  $password = user_password();

  $names = split(' ', $name);

  // Create the new user.
  $user_attributes = array(
    'name' => $params['mail'],
    'pass' => $password,
    'mail' => $params['mail'],
    'roles' => array(DRUPAL_AUTHENTICATED_RID),
    'status' => TRUE,
  );

  // Save the user.
  $new_user = user_save(
    new stdClass(),
    $user_attributes
  );

  drupal_set_message(t('Created a new account for @firstname @surname &lt;@email&gt;',
    array(
      '@firstname' => trim($params['firstname']),
      '@surname' => trim($params['surname']),
      '@email' => strtolower($new_user->mail)
    )
  ));

  // Create a profile for the user.
  $profile_attributes = array(
    'nid' => NULL, // NULL creates a new node.
    // 'title' => $new_user->name .'\'s Profile',
    'body' => NULL, // Defaults to no body.
    'type' => 'profile',
    'teaser' => NULL,
    'log' => '',
    'created' => '',
    'format' => FILTER_FORMAT_DEFAULT,
    'uid' => $new_user->uid,
  );
  foreach($params as $key => $value) {
    $profile_attributes['field_profile_' . $key] = array(array('value' => trim($value)));
  }

  // Save the profile.
  $new_profile = (object) $profile_attributes;
  node_save($new_profile);

  // Send an email to the user and tell them about the new account.
  if (variable_get('article_mail_article_new_user_notify_send', 1)) {

    $params = article_content_profile_vars('profile', $new_user->uid);

    $params['!username'] = $new_user->name;
    $params['!email'] = $new_user->mail;
    $params['!password'] = $password;

    // Prepare and send e-mail.
    drupal_mail('article', 'new_user_notify', $new_user->mail, $language, $params);
  }

  // If we have a newsletter, subscribe the user.
  //
  if (module_exists('simplenews') && ($tid = variable_get('register_newsletter_tid', 0))) {
    simplenews_subscribe_user($new_user->mail, $tid, FALSE);
  }

  return $new_user->uid;
}

/**
 * Function to export articles in CSV format. This depends on the exports being available
 * as views in MySQL. Basically, we select * from view.
 */
function article_export_csv($type) {

  switch($type) {

    case 'all':
      $view = 'view_export_articles';
      $header = array('id', 'Firstname', 'Surname', 'Organisation', 'Email', 'Country', 'Title', 'Article', 'Type', 'Submitted', 'Status', 'Notes', 'Kind', 'Category', 'Keywords', 'Internet', 'Tech_Requirements');
      break;

    case 'refereed':
      $view = 'view_export_accepted_refereed';
      $header = array('id', 'Firstname', 'Surname', 'Organisation', 'Email', 'Country', 'Title', 'Article', 'Type', 'Submitted', 'Status', 'Notes', 'Kind', 'Category', 'Keywords', 'Internet', 'Tech_Requirements');
      break;

    default:
      drupal_set_message(t('The CSV export you tried to access does not exist.'), 'error');
      return;
  }

  // Add a pretty CSV attachment header.
  header('Content-type: text/csv; charset=utf-8');
  header('Content-disposition: attachment; filename=export-' . $type . '-' . date("Y-m-d") . '.csv');
  // header('Content-type: text/plain; charset=utf-8');

  $query = 'SELECT * FROM ' . $view;
  $result = db_query($query);

  $lines = array( implode(',', $header));
  while ($o = db_fetch_array($result)) {
    $row = array();

    foreach ($o as $key => $value) {
      if ( $key != 'ID' ) {
        $row[] = '"' . str_replace('"', '\'', $value) . '"';
      }
      else {
        $row[] = $value;
      }
    }

    // Now I should really grab the taxonomies as well.
    // Doing it via node->load is very very easy, if dirty.
    $node = node_load($o['ID']);
    $tax = array();
    foreach ($node->taxonomy as $t) {
      $tax[$t->vid][] = $t->name;
    }
    $row[] = '"' . implode(', ', $tax[2]) . '"';
    $row[] = '"' . implode(', ', $tax[4]) . '"';
    $row[] = '"' . implode(', ', $tax[6]) . '"';
    $row[] = $node->field_article_tech_internet[0]['value'];
    $row[] = $node->field_article_tech_equipment[0]['value'];

    $lines[] = implode(',', $row);
  }

  print implode("\n", $lines);

  // Importantly, do not print anything else, just quit, exit and die.
  die();
}

/**
 * Implements hook_theme()
 */
function article_theme() {
  return array(
    'filefield_size' => array(
      'arguments' => array('file' => NULL),
    ),
  );
}

/**
 * Return the registration form fields defined by content profile.
 *
 * This is straight out of a signup.module patch.
 */
function article_user_profile_form() {
  require_once drupal_get_path('module', 'node') .'/node.pages.inc';
  $default_types = content_profile_get_types('names', 'registration_use');
  $form = array();
  foreach ($default_types as $type => $typename) {
    $form_state = array();
    // Fake a node here so that content_profile doesn't redirect.
    $form_state['node'] = array('nid' => FALSE);
    content_profile_registration_add_profile_form($type, $form, $form_state);
  }
  if (empty($form['#field_info'])) {
    return;
  }

  $new_form = array();
  foreach ($form['#field_info'] as $field => $value) {
    $new_form[$field] = $form[$field];
  }

  $extras = array(
    '#field_info', '#pre_render', '#content_profile_weights', '#attributes', 
  );
  foreach ($extras as $key) {
    $new_form[$key] = $form[$key];
  }

  return $new_form;
}

function article_user_profile_form_validate($form, &$form_state) {
  require_once drupal_get_path('module', 'node') .'/node.pages.inc';

  foreach (content_profile_get_types('names', 'registration_use') as $type => $typename) {
    $node = (object)$form_state['values']['profile'][$type];
    $node->type = $type;
    node_object_prepare($node);

    // Make sure there is no user name so we can node_validate
    unset($node->name);

    if (!in_array('other', content_profile_get_settings($type, 'registration_hide'))) {
      node_validate($node, $form['user']['profile']);
    }
    elseif (module_exists('content')) {
      content_validate($node);
    }

    $form_state['values']['profile']['content_profile_registration'][$type]['node'] = $node;
  }
  // Remove our added values
  foreach ($form['user']['profile']['#content_profile_weights'] as $key => $weight) {
    _content_profile_registration_remove_values($key, $form['user']['profile'][$key], $form_state);
  }
}

/**
 * Override the filefield formatter, include the file size as well.
 */
function article_filefield_file($file) {

  if (empty($file['fid'])) {
    return '';
  }

  $path = $file['filepath'];
  $url = file_create_url($path);
  $icon = theme('filefield_icon', $file);
  $size = theme('filefield_size', $file);

  $options = array(
    'attributes' => array(
      'type' => $file['filemime'] . '; length=' . $file['filesize'],
    ),
  );

  // Use the description as the link text if available.
  if (empty($file['data']['description'])) {
    $link_text = $file['filename'];
  }

  else {
    $link_text = $file['data']['description'];
    $options['attributes']['title'] = $file['filename'];
  }

  return '<div class="filefield-file clear-block">'. $icon . l($link_text, $url, $options) . $size . '</div>';
}

/**
 * Helper to pretty-format a file size.
 */
function article_filefield_size($file) {
  return '<span class="filefield-size">' . '(' . format_size($file['filesize']) . ')' . '</span>';
}
