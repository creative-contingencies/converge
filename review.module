<?php

/**
 * Implementation of hook_menu().
 */
function review_menu() {
  $items = array();
  
  $items['admin/settings/review'] = array(
    'title' => 'CCC Review Settings',
    'description' => 'Change configuration and email templates for Reviews',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['review/remind_reviewers'] = array(
    'title' => 'Send reminder email to reviewers',
    'description' => 'Change configuration and email templates for Reviews',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_remind_reviewers'),
    'access arguments' => array('send reviewers reminders'),
    'type' => MENU_CALLBACK,
  );
  
  $items['review/email_authors'] = array(
    'title' => 'Send status emails to authors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_email_authors'),
    'access arguments' => array('send authors their status'),
    'type' => MENU_CALLBACK,
  );

  $items['review/invite_reviewers'] = array(
    'title' => 'Invite potential reviewers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_reviewer_csv'),
    'access arguments' => array('send authors their status'),
    'type' => MENU_CALLBACK,
  );

  // Handler for the magic URL to add a reviewer to a proposal.
  // Needs to be hit by an authenticated user.
  $items['manage/review/%/%/%/%'] = array(
    'title' => 'Modify a review',
    'description' => 'Modify a review',
    'page callback' => 'review_manage_review',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Handler for the magic URL to accept or decline reviewer status.
  // Needs to be hit by any user.
  $items['manage/reviewer/%/%/%'] = array(
    'title' => 'Modify a review',
    'description' => 'Modify a review',
    'page callback' => 'review_manage_reviewer',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
/*function review_menu_alter(&$items) {
  dpm($items['node/%/reviews_nonpeer']);
  $items['node/%/reviews_nonpeer']['access callback'] = FALSE;
}*/

// Reviews panel for non-peer assessed reviews. If there are peers, deny access.
function reviews_nonpeer_access() {
  global $user;
  if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
    $node = node_load(arg(1));
    if ( $node->type == 'proposal' ) {
      $reviewers = false;
      foreach ( $node->field_proposal_reviewers as $reviewer ) {
        if ( $reviewer['uid'] > 0 ) {
          $reviewers = true;
          break;
        }
      }
      if ( !$reviewers ) {
        return true;
      }
    }
  }
  return false;
}

function review_email_authors() {

  $query = "SELECT global_settings FROM {content_node_field} WHERE field_name = '%s'";
  $result = db_query($query, 'field_proposal_status');
  $settings = db_fetch_object($result);
  $to_options_serialized = unserialize($settings->global_settings);
  $to_options_serialized = explode("\n", $to_options_serialized['allowed_values']);
  $to_options = array();
  foreach ( $to_options_serialized as $option ) {
    $option = explode('|', $option);
    $to_options[$option[0]] = $option[1];
  }

  $query = "SELECT tid,name FROM {term_data} WHERE vid = %d";
  $result = db_query($query, variable_get('proposal_vocabulary_kind'));
  $type_options = array();
  while ($o = db_fetch_object($result)) {
    $type_options[$o->tid] = $o->name;
  }

  $form['reviewer_email_authors'] = array(
    '#type' => 'fieldset',
    '#title' => 'E-mail Authors',
  );
  $form['reviewer_email_authors']['review_email_authors_to'] = array(
    '#title' => t('Filter by proposal status status'),
    '#description' => t("Select which proposal status' to e-mail authors."),
    '#type' => 'select',
    '#options' => $to_options,
    '#multiple' => true
  );
  $form['reviewer_email_authors']['review_email_authors_kind'] = array(
    '#title' => t('Filter by proposal type.'),
    '#description' => t("Select which proposal types to e-mail authors. If you select none, this filter will be ignored."),
    '#type' => 'select',
    '#options' => $type_options,
    '#multiple' => true
  );
  $form['reviewer_email_authors']['review_email_authors_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_email_authors_subject', ''),
  );
  $form['reviewer_email_authors']['review_email_authors_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_email_authors_body', ''),
    '#rows' => 12,
  );
  $form['reviewer_email_authors']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !author_firstname, !author_surname, !author_email, !proposal_title, !proposal_abstract, !proposal_url, !proposal_feedback_url, !proposal_status, !site, !site_url, !site_mail'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send E-Mails'),
  );

  return $form;
}

function review_email_authors_submit($form, &$form_state) {
  $params = array();
  if(empty($params['!site_url']))
     $params['!site_url'] = url('<front>', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site']))
     $params['!site'] = variable_get('site_name', '');
  $params['!site_name'] = $params['!site'];
  if(empty($params['!site_mail']))
     $params['!site_mail'] = variable_get('site_mail', '');

  $sent_to = array();

  // $query = "SELECT nid FROM {content_type_proposal} WHERE field_proposal_status_value IN ('" . implode("', '", $form_state['values']['review_email_authors_to']) . "')";
  $query = "SELECT ctp.nid FROM {content_type_proposal} AS ctp JOIN {term_node} AS tn ON (ctp.nid=tn.nid) WHERE field_proposal_status_value IN ('" . implode("', '", $form_state['values']['review_email_authors_to']) . "')";

  // If we filter by proposal type...
  if( $form_state['values']['review_email_authors_kind']) {
    $query .= " AND tn.tid IN (" . implode(',', $form_state['values']['review_email_authors_kind']) .")";
  }

  $result = db_query($query);
  while ( $n = db_fetch_object($result) ) {
    $proposal_node = node_load($n->nid);
    $params['!proposal_title'] = $proposal_node->title;
    $params['!proposal_abstract'] = $proposal_node->body;
    $params['!proposal_url'] = url('node/' . $proposal_node->nid, array('absolute' => TRUE));
    $params['!proposal_feedback_url'] = url('node/' . $proposal_node->nid . '/feedback', array('absolute' => TRUE));
    $params['!proposal_status'] = $proposal_node->field_proposal_status[0]['value'];
    
    $author_user = user_load(array('uid' => $proposal_node->uid));
    $author_profile = content_profile_load('profile', $author_user->uid);
    $params['!author_firstname'] = $author_profile->field_profile_firstname[0]['value'];
    $params['!author_surname'] = $author_profile->field_profile_surname[0]['value'];
    $params['!author_email'] = $author_user->mail;
    
    $message = array();
    $message['id'] = 'email_author';
    //$message['to'] = 'josh@opentechnologysolutions.com.au'; //testing mail
    $message['to'] = $reviewer_user->mail;
    $message['subject'] = strtr($form_state['values']['review_email_authors_subject'], $params);
    $message['body'] = drupal_wrap_mail(strtr($form_state['values']['review_email_authors_body'], $params));
    $message['headers']['From'] = $message['headers']['Sender'] = $message['headers']['Return-Path'] = $message['headers']['Errors-To'] = variable_get('site_mail', '');
    //dpm($message);

    if ( drupal_mail_send($message) ) {
      //dpm("Successfully sent to " . $message['to']);
      $sent_to[] = $author_profile->field_profile_firstname[0]['value'] . ' ' . $author_profile->field_profile_surname[0]['value'] . ' &lt;' . $author_user->mail . '&gt;';
    }
    else {
      drupal_set_message("Failed to send to " . $author_profile->field_profile_firstname[0]['value'] . ' ' . $author_profile->field_profile_surname[0]['value'] . ' &lt;' . $author_user->mail . '&gt;', 'error');
    }
  }

  if ( count($sent_to) ) {
    foreach ($sent_to as $recipient) {
      drupal_set_message(t('E-mail sent to !author', array('!author' => $recipient)));
    }
  }
  else {
    drupal_set_message("No emails were sent to any authors in the selected categories.");
  }
}

/**
 * Implementation of hook_perm().
 */
function review_perm() {
  return array('send reviewers reminders', 'send authors their status');
}


function review_remind_reviewers() {
  $form['reviewer_remind_reviewers'] = array(
    '#type' => 'fieldset',
    '#title' => 'Remind Reviewers',
  );
  $form['reviewer_remind_reviewers']['reviewer_remind_to'] = array(
    '#title' => t('Send To'),
    '#description' => t('Who to send the bulk email to.'),
    '#type' => 'select',
    '#options' => array(
      'peer' => t('reviewers with assigned papers only'),
      'nonpeer' => t('all users with review role')
    )
  ); 
  $form['reviewer_remind_reviewers']['reviewer_remind_reviewers_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('reviewer_remind_reviewers_subject', ''),
  );
  $form['reviewer_remind_reviewers']['reviewer_remind_reviewers_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('reviewer_remind_reviewers_body', ''),
    '#rows' => 12,
  );
  $form['reviewer_remind_reviewers']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !review_assigned_list_url, !review_nonpeer_list_url, !site, !site_url, !site_mail'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send E-Mails'),
  );

  return $form;
}

function review_remind_reviewers_submit($form, &$form_state) {
  $params = array();
  if(empty($params['!site_url']))
     $params['!site_url'] = url('<front>', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site']))
     $params['!site'] = variable_get('site_name', '');
  $params['!site_name'] = $params['!site'];
  if(empty($params['!site_mail']))
     $params['!site_mail'] = variable_get('site_mail', '');
  if(empty($params['!review_assigned_list_url']))
     $params['!review_assigned_list_url'] = url('review/peer_proposals', array('absolute' => true));
  if(empty($params['!review_nonpeer_list_url']))
     $params['!review_nonpeer_list_url'] = url('review/nonpeer_proposals', array('absolute' => true));

  if ( $form_state['values']['reviewer_remind_to'] == 'peer' ) {
    $query = "SELECT DISTINCT field_proposal_reviewers_uid AS uid FROM {content_field_proposal_reviewers}";
  }
  else {
    $rid_query = "SELECT rid FROM {role} WHERE name = '%s'";
    $rid_result = db_query($rid_query, 'reviewer');
    $rid = db_fetch_object($rid_result)->rid;
    $query = "SELECT DISTINCT uid FROM {users_roles} WHERE rid = " . $rid;
  }

  $result = db_query($query);
  $sent_to = array();
  while ( $u = db_fetch_object($result) ) {
    //dpm($u);
    if ( $u->uid != NULL ) {
      $reviewer_user = user_load(array('uid' => $u->uid));
      $reviewer_profile = content_profile_load('profile', $reviewer_user->uid);
      $params['!reviewer_firstname'] = $reviewer_profile->field_profile_firstname[0]['value'];
      $params['!reviewer_surname'] = $reviewer_profile->field_profile_surname[0]['value'];
      $params['!reviewer_email'] = $reviewer_user->mail;
      
      $message = array();
      $message['id'] = 'remind_reviewer';
      //$message['to'] = 'josh@opentechnologysolutions.com.au'; //testing mail
      $message['to'] = $reviewer_user->mail;
      $message['subject'] = strtr($form_state['values']['reviewer_remind_reviewers_subject'], $params);
      $message['body'] = drupal_wrap_mail(strtr($form_state['values']['reviewer_remind_reviewers_body'], $params));
      $message['headers']['From'] = $message['headers']['Sender'] = $message['headers']['Return-Path'] = $message['headers']['Errors-To'] = variable_get('site_mail', '');
      //dpm($message);
      if ( drupal_mail_send($message) ) {
        //dpm("Successfully sent to " . $message['to']);
        $sent_to[] = $reviewer_profile->field_profile_firstname[0]['value'] . ' ' . $reviewer_profile->field_profile_surname[0]['value'] . ' &lt;' . $reviewer_user->mail . '&gt;';
      }
      else {
        drupal_set_message("Failed to send to " . $reviewer_profile->field_profile_firstname[0]['value'] . ' ' . $reviewer_profile->field_profile_surname[0]['value'] . ' &lt;' . $reviewer_user->mail . '&gt;', 'error');
      }
    }
  }

  if ( count($sent_to) ) {
    drupal_set_message("E-mails sent to: " . implode(', ', $sent_to));
  }
  else {
    drupal_set_message("No emails sent. Please check that you have added reviewers.");
  }
}

/*
function review_theme($existing, $type, $theme, $path) {
  return array(
    'reviews_overview' => array(
      'arguments' => array('node' => NULL, 'reviews' => NULL),
      'template' => 'reviews_overview'
    ),
  );

}

function review_view_reviews($node) {
  // Get review nodes out of db
  $query = "SELECT nid FROM {content_type_paper_review} WHERE field_paper_nid = %d";
  $result = db_query($query, $node->nid);
  $reviews = array();
  while ( $review = db_fetch_object($result) ) {
    $reviews[$review->nid] = node_load($review->nid);
  }
  return theme('reviews_overview', $node, $reviews);
}
*/


function review_admin_settings() {

  // Review policy.
  $form['review_editorial_policy'] = array(
    '#title' => 'Editorial Policy',
    '#type' => 'textarea',
    '#description' => t('The editorial policy that is displayed at the top of each review.'),
    '#default_value' => variable_get('review_editorial_policy', ''),
    '#rows' => 12,
  );

  // Reviewer invitations.
  $form['reviewer_invitation'] = array(
    '#type' => 'fieldset',
    '#title' => 'Reviewer Invitations',
    '#description' => t('Configure the invitation email that is sent to potential reviewers.'),
  );
  $form['reviewer_invitation']['review_mail_reviewer_invite_subject'] = array(
    '#title' => 'Subject',
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_mail_reviewer_invite_subject', ''),
  );
  $form['reviewer_invitation']['review_mail_reviewer_invite_body'] = array(
    '#title' => 'Body',
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_mail_reviewer_invite_body', ''),
    '#rows' => 12,
  );
  $form['reviewer_invitation']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !accept_url, !decline_url, !site, !site_url, !site_mail'),
  );

  // Action response mail.

  $form['reviewer_action'] = array(
    '#type' => 'fieldset',
    '#title' => 'Chair Notification',
    '#description' => t('The email that is sent to the paper chairs when an invitee clicks their ACCEPT or REJECT link.'),
  );
  $form['reviewer_action']['review_mail_reviewer_invite_action_subject'] = array(
    '#title' => 'Subject',
    '#description' => t('The subject for the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_mail_reviewer_invite_action_subject', ''),
  );
  $form['reviewer_action']['review_mail_reviewer_invite_action_body'] = array(
    '#title' => 'Body',
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_mail_reviewer_invite_action_body', ''),
    '#rows' => 12,
  );
  $form['reviewer_action']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in these emails: !reviewer_firstname, !reviewer_surname, !reviewer_email, !action, !site, !site_url, !site_mail'),
  );

  // Reviewer settings.
  $form['reviewer_add_notify'] = array(
    '#type' => 'fieldset',
    '#title' => 'Reviewer Add Notification',
    '#description' => t('Choose whether or not a reviewer is notified when they are assigned to a proposal.'),
  );
  $form['reviewer_add_notify']['review_mail_reviewer_add_notify_send'] = array(
    '#title' => t('Send notification to reviewer'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('review_mail_reviewer_add_notify_send', 1),
  );
  $form['reviewer_add_notify']['review_mail_reviewer_add_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_mail_reviewer_add_notify_subject', ''),
  );
  $form['reviewer_add_notify']['review_mail_reviewer_add_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_mail_reviewer_add_notify_body', ''),
    '#rows' => 12,
  );
  $form['reviewer_add_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !author_firstname, !author_surname, !author_email, !title, !abstract, !proposal_url, !review_url, !site, !site_url, !site_mail'),
  );


  $form['reviewer_remove_notify'] = array(
    '#type' => 'fieldset',
    '#title' => 'Reviewer Remove Notification',
    '#description' => t('Choose whether or not a reviewer is notified when they are removed from a proposal.'),
  );
  $form['reviewer_remove_notify']['review_mail_reviewer_remove_notify_send'] = array(
    '#title' => t('Send notification to reviewer'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('review_mail_reviewer_remove_notify_send', 1),
  );
  $form['reviewer_remove_notify']['review_mail_reviewer_remove_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_mail_reviewer_remove_notify_subject', ''),
  );
  $form['reviewer_remove_notify']['review_mail_reviewer_remove_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_mail_reviewer_remove_notify_body', ''),
    '#rows' => 12,
  );
  $form['reviewer_remove_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !author_firstname, !author_surname, !author_email, !title, !abstract, !proposal_url, !review_url, !site, !site_url, !site_mail'),
  );

  $form['reviewer_decline_notify'] = array(
    '#type' => 'fieldset',
    '#title' => 'Reviewer Decline Notification',
    '#description' => t('Choose whether or not chairpersons are notified when an assigned reviewer declines to review a proposal.'),
  );
  $form['reviewer_decline_notify']['review_mail_reviewer_decline_notify_send'] = array(
    '#title' => t('Send notification to chairpersons'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('review_mail_reviewer_decline_notify_send', 1),
  );
  $form['reviewer_decline_notify']['review_mail_reviewer_decline_chair_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_mail_reviewer_decline_chair_notify_subject', ''),
  );
  $form['reviewer_decline_notify']['review_mail_reviewer_decline_chair_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_mail_reviewer_decline_chair_notify_body', ''),
    '#rows' => 12,
  );
  $form['reviewer_decline_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !title, !abstract, !proposal_url, !site, !site_url, !site_mail'),
  );


  $form['review_email_authors'] = array(
    '#type' => 'fieldset',
    '#title' => 'E-mail Authors Template',
    '#description' => t('The default template for sending the authors their status\'.'),
  );
  $form['review_email_authors']['review_email_authors_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_email_authors_subject', ''),
  );
  $form['review_email_authors']['review_email_authors_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_email_authors_body', ''),
    '#rows' => 12,
  );
  $form['review_email_authors']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !author_firstname, !author_surname, !author_email, !proposal_title, !proposal_abstract, !proposal_url, !proposal_feedback_url, !proposal_status, !site, !site_url, !site_mail'),
  );

  $form['reviewer_remind_reviewers'] = array(
    '#type' => 'fieldset',
    '#title' => 'Remind Reviewers Template',
    '#description' => t('The default template for sending reminders to reviewers.'),
  );
  $form['reviewer_remind_reviewers']['reviewer_remind_reviewers_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('reviewer_remind_reviewers_subject', ''),
  );
  $form['reviewer_remind_reviewers']['reviewer_remind_reviewers_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('reviewer_remind_reviewers_body', ''),
    '#rows' => 12,
  );
  $form['reviewer_remind_reviewers']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !review_assigned_list_url, !review_nonpeer_list_url, !site, !site_url, !site_mail'),
  );

  return system_settings_form($form);  
}

/*
 * Implementation of hook_form_alter()
 *
 * Insert fields that allow user creation when the form is submitted.
 */
function review_form_alter(&$form, $form_state, $form_id) {
  global $user;

  if ($form_id == 'paper_review_node_form') {
    // Remove the Preview button.
    unset($form['buttons']['preview']);

    // Insert edit message.
/*
    if (arg(2) == 'edit') {
      drupal_set_message(t('You are editing a review'), 'warning');
    }
*/
  }

  if ( $form_id == 'proposal_node_form' && isset($_GET['assign_reviewers']) && $_GET['assign_reviewers'] == True ) {
    $form['field_proposal_reviewers']['#size'] = 12;
    // Show only reviewers field to allow reviewer assignment through standard node-edit and CCK.
    $js = "
    $(document).ready(function() {
      $('#content .node-form .standard').children().each(function() {
        if ( $(this).attr('id') != 'field-proposal-reviewers-items' && $(this).attr('id') != 'edit-field-proposal-reviewers-uid-uid-wrapper' && $(this).attr('class') != 'not-hidden' ) {
          $(this).hide();
        }
      });
      $('#content .help p').hide();
      $('#edit-preview').hide();
      $('#edit-delete').hide();
    });
    ";
    
    drupal_add_js($js, 'inline');

    // Show a list of reviewers with interests that match the categories on this node.

    // Get category vid.
    $vid = variable_get('proposal_vocabulary_category', 0);
    if ($vid) {

      $rid = db_result(db_query("SELECT rid FROM {role} WHERE name='reviewer'"));

      // Select tids for nid in vid.
      $query = "SELECT tn.tid FROM {term_node} AS tn LEFT JOIN {term_data} AS td ON (tn.tid=td.tid) WHERE tn.nid=%d AND td.vid=%d";
      $result = db_query($query, $form['nid']['#value'], $vid);
      while ($o = db_fetch_object($result)) {
        $tid[] = $o->tid;
      }

      // Select profiles whose vid contains one or more of these tids.
      $query = "SELECT n.uid AS uid, COUNT(tn.tid) AS matches, ctp.field_profile_firstname_value AS firstname, ctp.field_profile_surname_value AS surname FROM {term_node} AS tn LEFT JOIN node AS n ON (tn.nid=n.nid) LEFT JOIN {users_roles} AS ur ON (ur.uid=n.uid) LEFT JOIN {content_type_profile} AS ctp ON(n.nid=ctp.nid) WHERE n.type='%s' AND ur.rid=%d AND tn.tid IN (" . implode(',', $tid) . ") GROUP BY n.uid ORDER BY matches DESC";
      $result = db_query($query, 'profile', $rid);

      while ($o = db_fetch_object($result)) {
        $data[] = array(
          l($o->firstname, 'user/' . $o->uid),
          l($o->surname, 'user/' . $o->uid),
          $o->matches
        );
      }

      $form['matches'] = array(
        '#type' => 'fieldset',
        '#title' => 'Suggested reviewers',
        '#description' => 'Based on selected interests, these reviewers should be preferentially assigned to review this proposal.',
        '#attributes' => array('class' => 'not-hidden'),
      );
      if (count($data)) {
        $titles = array('Firstname', 'Surname', 'Matches');
        $form['matches']['list'] = array(
          '#type' => 'markup',
          '#value' => theme('table', $titles, $data),
          '#attributes' => array('class' => 'not-hidden'),
        );
      } else {
        $form['matches']['list'] = array(
          '#type' => 'markup',
          '#value' => 'No reviewers with matching interests were found.',
          '#attributes' => array('class' => 'not-hidden'),
        );
      } // !count
    } // !vid
  }
  else if ( $form_id == 'proposal_node_form' && isset($_GET['change_status']) && $_GET['change_status'] == True ) {
    // Show only status field for updating proposals.
    $js = "
    $(document).ready(function() {
      $('#content .node-form .standard').children().each(function() {
        if ( $(this).attr('id') != 'edit-field-proposal-status-value-wrapper' ) {
          $(this).hide();
        }
      });
      $('#content .help p').hide();
      $('#edit-preview').hide();
      $('#edit-delete').hide();
    });
    ";
    
    drupal_add_js($js, 'inline');
  }


}


/**
 * Implementation of hook_nodeapi().
 * Send emails when new proposals are created.
 */
function review_nodeapi(&$node, $op, $a1) {
  global $user;
  switch($op) {
    case 'view':
      // Check to see if there are reviewers. If there are, hide the presenters.
      if ( $node->type == 'proposal' ) {
        $reviewers = false;
        foreach ( $node->field_proposal_reviewers as $reviewer ) {
          if ( $reviewer['uid'] > 0 ) {
            $reviewers = true;
            break;
          }
        }
        if ( $reviewers ) {
          unset($node->field_proposal_presenters);
        }
      }
    break;
    case 'prepare':
      if ( arg(0) == 'node' && !($node->nid > 0) && $node->type == 'paper_review' && !isset($_GET['nid']) ) {
        // no id set... take them back...
        drupal_set_message("You must use the Reviewers menu to review an item.");
        drupal_goto();
      }
      if ( !($node->nid > 0) && $node->type == 'paper_review' && isset($_GET['nid']) && is_numeric($_GET['nid']) ) {
        // Check to see if a user has already reviewed this 
        $query = "SELECT nid FROM {node} WHERE type='paper_review' AND uid = %s";
        $result = db_query($query, $user->uid);
        while ( $n = db_fetch_object($result) ) {
          $review_node = node_load($n->nid);
          if ( $review_node->field_paper[0]['nid'] == $_GET['nid'] ) {
            drupal_set_message("You have already reviewed this proposal. You may edit and update your review below.");
            drupal_goto('node/' . $review_node->nid . '/edit', array('nid' => $_GET['nid']));
          }
        }
        $proposal_node = node_load($_GET['nid']);
        $assigned = true;
        foreach ( $proposal_node->field_proposal_reviewers as $u ) {
          if ( is_numeric($u['uid']) ) {
            $assigned = false;
          }
          if ( $u['uid'] == $user->uid ) {
            $assigned = true;
            break;
          }
        }
        if ( !$assigned ) {
          drupal_set_message("You are not assigned to review this proposal.");
          drupal_goto();
        }
      }
      else if ( ($node->nid > 0) && $node->type == 'paper_review' ) {
        $proposal_node = node_load($node->field_paper[0]['nid']);
      }
      
      // Add another if, or it'll show "Reviewing" as title everywhere.
      if ( $node->type == 'paper_review' ) {
        $js = "
        $(document).ready(function() {
          $('#edit-field-paper-0-nid-nid-wrapper').hide();
          $('#content .title').text('Reviewing " . $proposal_node->title . "');
        });
        ";
      
        drupal_add_js($js, 'inline');
      }
    break;
      
    case 'presave':
      if ( $node->type == 'paper_review' && arg(2) != 'edit' ) {
        // Check to see if a user has already reviewed this 
        $query = "SELECT nid FROM {node} WHERE type='paper_review' AND uid = %s";
        $result = db_query($query, $user->uid);
        while ( $n = db_fetch_object($result) ) {
          $review_node = node_load($n->nid);
          if ( $review_node->field_paper[0]['nid'] == $node->field_paper[0]['nid'] ) {
            drupal_set_message("You have already reviewed this proposal. You may edit and update your review below.");
            drupal_goto('node/' . $review_node->nid . '/edit');
          }
        }
        $proposal_node = node_load($node->field_paper[0]['nid']);
        $assigned = true;
        foreach ( $proposal_node->field_proposal_reviewers as $u ) {
          if ( is_numeric($u['uid']) ) {
            $assigned = false;
          }
          if ( $u['uid'] == $user->uid ) {
            $assigned = true;
            break;
          }
        }
        if ( !$assigned ) {
          drupal_set_message("You are not assigned to review this proposal.");
          drupal_goto();
        }
      }
      else if ( $node->type == 'proposal' ) {
        // Email the reviewers
        // clear the "munged" params
        $params = array();
        //!reviewer_firstname, !reviewer_surname, !reviewer_email, !author_firstname, !author_surname, !author_email, !title, !abstract, !proposal_url, !review_url, !site, !site_url, !site_mail'

        // The UUID is not available in hook_presave, so we need to load it explicitly!
        if (!$node->uuid) {
          $uuid = db_result(db_query("SELECT uuid FROM {node_uuid} WHERE nid=%d", $node->nid));
          if (!$uuid) {
            drupal_set_message(t('Node !nid has no uuid!', array('!nid' => $node->nid)), 'error');
            return;
          }
          $node->uuid = $uuid;
        }

        $author = content_profile_load('profile', $node->uid);
        $author_user = user_load(array('uid' => $node->uid));
        $params['!author_firstname'] = $author->field_profile_firstname[0]['value'];
        $params['!author_surname'] = $author->field_profile_surname[0]['value'];
        $params['!author_email'] = $author_user->mail;
        $params['!title'] = $node->title;
        $params['!abstract'] = $node->body;
        $params['!proposal_url'] = url('node/' . $node->nid, array('absolute' => true));
        $params['!review_url'] = url('node/add/paper-review', array('absolute' => true, 'query' => array('nid' => $node->nid)));

        // Load in the already existing reviewers
        $new_reviewers = $node->field_proposal_reviewers;
        $num_new_reviewers = count($new_reviewers);
        if ( $node->nid ) {
          $old_node = node_load($node->nid);
          $old_reviewers = $old_node->field_proposal_reviewers;
          $num_old_reviewers = count($old_reviewers);
          for ( $i = 0; $i < $num_old_reviewers; $i++) {
            for ( $j = 0; $j < $num_new_reviewers; $j++) {
              if ( (int)$old_reviewers[$i]['uid'] == (int)$new_reviewers[$j]['uid'] ) {
                // no change. person was there before and is there now
                unset($old_reviewers[$i], $new_reviewers[$j]);
              }
            }
          }
          // loop through the remaining old reviewers who have not been kept on and email them about being removed
          if (variable_get('review_mail_reviewer_remove_notify_send', 0)) {
            foreach ( $old_reviewers as $reviewer ) {
              if ( $reviewer['uid'] > 0 ) {
                $reviewer_profile = content_profile_load('profile', $reviewer['uid']);
                $reviewer_user = user_load(array('uid' => $reviewer['uid']));
                $params['!reviewer_firstname'] = $reviewer_profile->field_profile_firstname[0]['value'];
                $params['!reviewer_surname'] = $reviewer_profile->field_profile_surname[0]['value'];
                $params['!reviewer_email'] = $reviewer_user->mail;
                drupal_mail('review', 'reviewer_remove_notify', $reviewer_user->mail, $language, $params);
                drupal_set_message(t('A notification of removal from reviewing has been sent to ' . $reviewer_user->mail . '.'));
              }
            }
          }
        }
        // email new reviewers
        if (variable_get('review_mail_reviewer_add_notify_send', 0)) {
          foreach ( $new_reviewers as $index => $reviewer ) {
            if ( $reviewer['uid'] > 0 ) {
              $reviewer_profile = content_profile_load('profile', $reviewer['uid']);
              $reviewer_user = user_load(array('uid' => $reviewer['uid']));
              $params['!review_decline_url'] = url('manage/review/decline/' . $node->nid . '/' . $node->uuid . '/' . $reviewer_user->uid , array('absolute' => true));
              $params['!reviewer_firstname'] = $reviewer_profile->field_profile_firstname[0]['value'];
              $params['!reviewer_surname'] = $reviewer_profile->field_profile_surname[0]['value'];
              $params['!reviewer_email'] = $reviewer_user->mail;
              drupal_mail('review', 'reviewer_add_notify', $reviewer_user->mail, $language, $params);
              drupal_set_message(t('An invite to review has been sent to ' . $reviewer_user->mail . '.'));
            }
          }
        }
      }
    break;
  }
}

/**
 * Implementation of hook_mail().
 */
function review_mail($key, &$message, $params) {

  if(empty($params['!login_url']))
     $params['!login_url'] = url('user', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!edit_url']))
     $params['!edit_url'] = url('user-profile', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site_url']))
     $params['!site_url'] = url('<front>', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site']))
     $params['!site'] = variable_get('site_name', '');
  $params['!site_name'] = $params['!site'];
  if(empty($params['!site_mail']))
     $params['!site_mail'] = variable_get('site_mail', '');

  switch ($key) {
    case 'reviewer_add_notify':
      $message['subject'] = strtr(variable_get('review_mail_reviewer_add_notify_subject'), $params);
      $message['body'][] = strtr(variable_get('review_mail_reviewer_add_notify_body'), $params);
      break;
    case 'reviewer_remove_notify':
      $message['subject'] = strtr(variable_get('review_mail_reviewer_remove_notify_subject'), $params);
      $message['body'][] = strtr(variable_get('review_mail_reviewer_remove_notify_body'), $params);
      break;
    case 'reviewer_decline_chair_notify':
      $message['subject'] = strtr(variable_get('review_mail_reviewer_decline_chair_notify_subject'), $params);
      $message['body'][] = strtr(variable_get('review_mail_reviewer_decline_chair_notify_body'), $params);
      break;
    default:
      $message['subject'] = strtr(variable_get('review_mail_'. $key .'_subject'), $params);
      $message['body'][] = strtr(variable_get('review_mail_'. $key .'_body'), $params);
  }
}

/**
 * Implementation of hook_link().
 */
function review_link($type, $object, $teaser = FALSE) {
  $links = array();
  global $user;

  if($user->uid == 0)
    return $links;
  
  if ( $type == 'node' && $object->type == 'proposal' ) {
    $can_review = False;
    foreach ( $object->field_proposal_reviewers as $reviewer ) {
        if ($reviewer['uid'] == $user->uid) {
            $can_review = True;
            break;
        }
    }
    if ( $can_review ) {
        $links[] = array(
          'title' => t('Review Paper'),
          'href' => 'node/add/paper-review',
          'query' => 'nid=' . $object->nid,
        );
    }
  }
  
  return $links;
}

/**
 * Form to read a CVS file.
 */
function review_reviewer_csv() {
  drupal_set_message('TODO: Data verification step.');
  $form['invite'] = array(
    '#type' => 'fieldset',
    '#title' => 'Invite Reviewers',
    '#description' => 'Upload a file with reviewer contact details and automatically invite them to take part in the review process.',
  );
  $form['invite']['explanation'] = array(
    '#type' => 'markup',
    '#value' => '<p>The CSV file must contain exactly 5 columns and the first row must not be headers.<p>The structure of the file is:<pre>Firstname,Surname,"Organisation",Position,Email</pre><p>If an email address is not valid, that reviewer will not be added.',
  );
  $form['invite']['file'] = array(
    '#type' => 'file',
    '#title' => 'Select CSV File',
    '#description' => 'Please select the properly formatted CSV file with invitee details.',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Upload and Invite',
  );

  $form['#attributes'] = array('enctype' => "multipart/form-data");
  return $form;
}

function review_reviewer_csv_validate($form, &$form_state) {

  // dpm($form_state);

  $file = file_save_upload('file');
  if (!$file) {
    drupal_set_message('You must select a CSV file to upload.', 'error');
    form_set_error('file');
    return;
  }

  $fp = fopen($file->filepath, 'r');
  if ($fp) {
    $line = fgetcsv($fp);
    fclose($fp);
  } else {
    drupal_set_message('Unable to access uploaded file.', 'error');
    form_set_error('file');
    return;
  }

  if (count($line) != 5) {
    drupal_set_message('The uploaded file is not a valid CSV file.', 'error');
    form_set_error('file');
    return;
  }

}

function review_reviewer_csv_submit($form, &$form_state) {

  global $language;

  $file = file_save_upload('file');
  if (!$file) {
    drupal_set_message('Unable to access uploaded file.', 'error');
    form_set_error('file');
    return;
  }

  $fp = fopen($file->filepath, 'r');
  if (!$fp) {
    drupal_set_message('Unable to access uploaded file.', 'error');
    form_set_error('file');
    return;
  }

  $i = 0;
  while (!feof($fp)) {
    $i++;

    $data = array();
    $line = fgetcsv($fp);

    if (!count($line)) {
      // Last line will be empty...
      continue;
    }

    // User with this email?
    if (!valid_email_address($line[4])) {
      drupal_set_message(t('Invalid email adress "@mail" on line !num. Line skipped.', array('!num' => $i, '@mail' => $line[4])), 'warning');
      continue;
    }

    $params = array();

    $uid = db_result(db_query("SELECT uid FROM users WHERE LCASE(mail) = '%s'", strtolower(trim($line[4]))));
    if ($uid > 0) {
      $reviewer = user_load($uid);
      $profile = content_profile_load('profile', $reviewer->uid);
    } else {
      $data['firstname'] = $line[0];
      $data['surname'] = $line[1];
      $data['organisation'] = $line[2];
      $data['position'] = $line[3];
      $data['mail'] = $line[4];

      $new_uid = proposal_copresenter_create($data);
      $reviewer = user_load($new_uid);
      $profile = content_profile_load('profile', $reviewer->uid);
    }

    if (!$reviewer->uuid) {
      drupal_set_message(t('Reviewer !mail does not have a UUID', array('!mail' => $reviewer->mail)), 'error');
      return;
    }

    // make email vars.
    $params['!reviewer_firstname'] = $profile->field_profile_firstname[0]['value'];
    $params['!reviewer_surname'] = $profile->field_profile_surname[0]['value'];
    $params['!reviewer_user'] = $reviewer->mail;
    $params['!reviewer_email'] = $reviewer->mail;
    $params['!accept_url'] = url('manage/reviewer/accept/' . $reviewer->uuid . '/' . $reviewer->uid, array('absolute' => true));
    $params['!decline_url'] = url('manage/reviewer/decline/' . $reviewer->uuid . '/' . $reviewer->uid, array('absolute' => true));

    // Email this user.
    drupal_mail('review', 'reviewer_invite', $reviewer->mail, $language, $params);

    // Message on screen.
    drupal_set_message(t('Sent invitation to @firstname @surname &lt;@mail&gt;.', array('@firstname' => $profile->field_profile_firstname[0]['value'], '@surname' => $profile->field_profile_surname[0]['value'], '@mail' => $reviewer->mail)));

  }
  fclose($fp);

}

/**
 * Function to manage reviewer invitation acceptance and rejections.
 * This needs to handle accept and decline magic URLs.
 */
function review_manage_reviewer($op, $uuid, $vuid) {

  global $user;

  // Load a user by UUID.
  $victim = user_load($vuid);
  if ($victim->uid == 0 || $victim->uuid != $uuid) {
    drupal_set_message('The link you clicked is invalid.', 'error');
    drupal_goto('<front>');
    return;
  }

  $profile = content_profile_load('profile', $victim->uid);

  $params['!reviewer_firstname'] = $profile->field_profile_firstname[0]['value'];
  $params['!reviewer_surname'] = $profile->field_profile_surname[0]['value'];
  $params['!reviewer_email'] = $victim->mail;
  $params['!action'] = $op;

  // Reviewer rid.
  $rid = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", 'reviewer'));

  switch($op) {
    case 'accept':

      // Log the user in.
      if ($user->uid == 0) {
        $user = $victim;
      }

      if (in_array('reviewer', $victim->roles)) {
        drupal_set_message('You are aready a reviewer.', 'warning');
        drupal_goto('user/' . $user->uid . '/edit/profile');
        return;
      }

      // Set reviewer role.
      $roles = $victim->roles + array($rid => 'reviewer');
      user_save($victim, array('roles' => $roles));

      // Update logged-in user!
      $user = $victim;

      // Send email to chairs.
      $result = db_query("SELECT u.mail FROM {users_roles} AS ur LEFT JOIN {users} AS u ON (u.uid=ur.uid) WHERE ur.rid=%d", variable_get('proposal_chair_rid', 0));
      while($o = db_fetch_object($result)) {
        drupal_mail('review', 'reviewer_invite_action', $o->mail, $language, $params);
      }

      // Tell the $user what we did.
      drupal_set_message(t('Thank you for agreeing to review papers.'));
      drupal_set_message(t('Please complete this profile and indicate your interest areas below, so we can assign relevant papers.'));
      drupal_set_message(t('You will receive an email with instructions once a paper has been assigned for you to review.'));
      drupal_goto('user/' . $user->uid . '/edit/profile');
      return;
      break;

    case 'decline':

      // Send email to chairs.
      $result = db_query("SELECT u.mail FROM {users_roles} AS ur LEFT JOIN {users} AS u ON (u.uid=ur.uid) WHERE ur.rid=%d", variable_get('proposal_chair_rid', 0));
      while($o = db_fetch_object($result)) {
        drupal_mail('review', 'reviewer_invite_action', $o->mail, $language, $params);
      }

      // User is already a reviewer?
      if (in_array('reviewer', $victim->roles)) {
        drupal_set_message('You had previously accepted. The paper committee chairs have been notified of your decision to decline the invitation.', 'warning');

        $roles = array_diff($victim->roles, array($rid => 'reviewer'));
        user_save($victim, array('roles' => $roles));

        // If logged in, reload the perms.
        if ($user->uid > 0)
          $user = $victim;
      } else {
        drupal_set_message(t('Thank you. The paper committee chairs have been notified of your decision to decline the invitation.'));
      }
      break;

    default:
      drupal_set_message('I have no idea what to do, sorry. Please use the contact page and let us know what happened and which link you clicked.', 'error');
      break;

  }
  drupal_goto('<front>');
}

/**
 * Function to handle the adding and removing of reviews to and from proposals.
 */
function review_manage_review($op, $pid, $uuid, $vuid) {

  global $user;

  $victim_is_reviewer = FALSE;

  if(!in_array('authenticated user', $user->roles)) {
    drupal_goto('user', drupal_get_destination());
    return;
  }

  $proposal = node_load($pid);
  $victim = user_load($vuid);

  // Don't bother if we're removing the guest user.

  // Check that the UUID matches.
  if(!$proposal || $proposal->uuid != $uuid) {
    // Not a valid proposal or UUID. Fuckoff.
    drupal_set_message('The link you clicked is invalid.', 'error');
    drupal_goto('<front>');
    return;
  }

  // Is the calling user the victim? Or Admin!
  if($victim->uid != $user->uid && $user->uid != 1) {
    drupal_set_message('The link you clicked is invalid.', 'error');
    drupal_goto('<front>');
    return;
  }
  if($user->uid == 1)
    drupal_set_message(t('Administrator override is in effect.'), 'warning');

  // Check if $user is already on the list.
  foreach($proposal->field_proposal_reviewers as $r) {
    if($r['uid'] == $victim->uid) {
      $victim_is_reviewer = TRUE;
    }
  }

  // We have a valid proposal and we know what to do. Do it.
  switch($op) {
    case 'decline':
      if($victim_is_reviewer) {
        for($i = 0; $i < count($proposal->field_proposal_reviewers); $i++) {
          if($proposal->field_proposal_reviewers[$i]['uid'] == $victim->uid) {
            unset($proposal->field_proposal_reviewers[$i]);
          }
        }
        node_save($proposal);
        drupal_set_message($victim->name . ' was removed as reviewer for "' . $proposal->title .'"');

        // And we now want to let the paper chairs know.
        $reviewer_profile = content_profile_load('profile', $victim->uid);
        $params['!reviewer_firstname'] = $reviewer_profile->field_profile_firstname[0]['value'];
        $params['!reviewer_surname'] = $reviewer_profile->field_profile_surname[0]['value'];
        $params['!reviewer_email'] = $victim->mail;
        $params['!title'] = $proposal->title;
        $params['!abstract'] = $proposal->body;
        $params['!proposal_url'] = url('node/' . $proposal->nid, array('absolute' => true));

        if (variable_get('review_mail_reviewer_decline_notify_send', 0)) {
          $result = db_query("SELECT u.mail FROM {users_roles} AS ur LEFT JOIN {users} AS u ON (u.uid=ur.uid) WHERE ur.rid=%d", variable_get('proposal_chair_rid', 0));
          while($o = db_fetch_object($result)) {
            drupal_mail('review', 'reviewer_decline_chair_notify', $o->mail, $language, $params);
          }
        }

      } else {  // if user is not presenter
        drupal_set_message($victim->name . ' is not a listed reviewer for "' . $proposal->title .'"', 'error');
      }
      break;

    default:
      drupal_set_message('I have no idea what to do, sorry. Please use the contact page and let us know what happened and which link you clicked.', 'error');
      break;
  }

  drupal_goto('user');
  return;
}
