<?php

/**
 * Implementation of hook_menu().
 */
function review_menu() {
  $items = array();
  
  $items['admin/settings/review'] = array(
    'title' => 'CCC Review Settings',
    'description' => 'Change configuration and email templates for Reviews',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('review_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}


/*
function review_theme($existing, $type, $theme, $path) {
  return array(
    'reviews_overview' => array(
      'arguments' => array('node' => NULL, 'reviews' => NULL),
      'template' => 'reviews_overview'
    ),
  );

}

function review_view_reviews($node) {
  // Get review nodes out of db
  $query = "SELECT nid FROM {content_type_paper_review} WHERE field_paper_nid = %d";
  $result = db_query($query, $node->nid);
  $reviews = array();
  while ( $review = db_fetch_object($result) ) {
    $reviews[$review->nid] = node_load($review->nid);
  }
  return theme('reviews_overview', $node, $reviews);
}
*/


function review_admin_settings() {

  // Reviewer settings.
  $form['reviewer_add_notify'] = array(
    '#type' => 'fieldset',
    '#title' => 'Reviewer Add Notification',
    '#description' => t('Choose whether or not a reviewer is notified when they are assigned to a proposal.'),
  );
  $form['reviewer_add_notify']['review_mail_reviewer_add_notify_send'] = array(
    '#title' => t('Send notification to reviewer'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('review_mail_reviewer_add_notify_send', 1),
  );
  $form['reviewer_add_notify']['review_mail_reviewer_add_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_mail_reviewer_add_notify_subject', ''),
  );
  $form['reviewer_add_notify']['review_mail_reviewer_add_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_mail_reviewer_add_notify_body', ''),
    '#rows' => 16,
  );
  $form['reviewer_add_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !author_firstname, !author_surname, !author_email, !title, !abstract, !proposal_url, !review_url, !site, !site_url, !site_mail'),
  );


  $form['reviewer_remove_notify'] = array(
    '#type' => 'fieldset',
    '#title' => 'Reviewer Remove Notification',
    '#description' => t('Choose whether or not a reviewer is notified when they are removed from a proposal.'),
  );
  $form['reviewer_remove_notify']['review_mail_reviewer_remove_notify_send'] = array(
    '#title' => t('Send notification to reviewer'),
    '#description' => t(''),
    '#type' => 'radios',
    '#options' => array(
      t('Do not send notification email.'),
      t('Send notification email.')
    ),
    '#default_value' => variable_get('review_mail_reviewer_remove_notify_send', 1),
  );
  $form['reviewer_remove_notify']['review_mail_reviewer_remove_notify_subject'] = array(
    '#title' => t('Subject'),
    '#description' => t('The subject line to appear on the email.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('review_mail_reviewer_remove_notify_subject', ''),
  );
  $form['reviewer_remove_notify']['review_mail_reviewer_remove_notify_body'] = array(
    '#title' => t('Body'),
    '#description' => t('The body for the email.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('review_mail_reviewer_remove_notify_body', ''),
    '#rows' => 16,
  );
  $form['reviewer_remove_notify']['vars'] = array(
    '#type' => 'markup',
    '#value' => t('The following substitution variables are available in this email: !reviewer_firstname, !reviewer_surname, !reviewer_email, !author_firstname, !author_surname, !author_email, !title, !abstract, !proposal_url, !review_url, !site, !site_url, !site_mail'),
  );

  return system_settings_form($form);  
}

/*
 * Implementation of hook_form_alter()
 *
 * Insert fields that allow user creation when the form is submitted.
 */
function review_form_alter(&$form, $form_state, $form_id) {
  global $user;

  if ( $form_id == 'proposal_node_form' && isset($_GET['assign_reviewers']) && $_GET['assign_reviewers'] == True ) {
    // Show only reviewers field to allow reviewer assignment through standard node-edit and CCK.
    $js = "
    $(document).ready(function() {
      $('#content .node-form .standard').children().each(function() {
        if ( $(this).attr('id') != 'field-proposal-reviewers-items' ) {
          $(this).hide()
        }
      });
      $('#content .help p').hide();
      $('#edit-preview').hide();
      $('#edit-delete').hide();
    });
    ";
    
    drupal_add_js($js, 'inline');
  }
  else if ( $form_id == 'proposal_node_form' && isset($_GET['change_status']) && $_GET['change_status'] == True ) {
    // Show only status field for updating proposals.
    $js = "
    $(document).ready(function() {
      $('#content .node-form .standard').children().each(function() {
        if ( $(this).attr('id') != 'edit-field-proposal-status-value-wrapper' ) {
          $(this).hide()
        }
      });
      $('#content .help p').hide();
      $('#edit-preview').hide();
      $('#edit-delete').hide();
    });
    ";
    
    drupal_add_js($js, 'inline');
  }
}


/**
 * Implementation of hook_nodeapi().
 * Send emails when new proposals are created.
 */
function review_nodeapi(&$node, $op, $a1) {
  global $user;
  switch($op) {
    case 'view':
      // Check to see if there are reviewers. If there are, hide the presenters.
      if ( $node->type == 'proposal' ) {
        $reviewers = false;
        foreach ( $node->field_proposal_reviewers as $reviewer ) {
          if ( $reviewer['uid'] > 0 ) {
            $reviewers = true;
            break;
          }
        }
        if ( $reviewers ) {
          unset($node->field_proposal_presenters);
        }
      }
    break;
    case 'prepare':
      if ( arg(0) == 'node' && !($node->nid > 0) && $node->type == 'paper_review' && !isset($_GET['nid']) ) {
        // no id set... take them back...
        drupal_set_message("You must use the Reviewers menu too review an item.");
        drupal_goto();
      }
      if ( !($node->nid > 0) && $node->type == 'paper_review' && isset($_GET['nid']) && is_numeric($_GET['nid']) ) {
        // Check to see if a user has already reviewed this 
        $query = "SELECT nid FROM {node} WHERE type='paper_review' AND uid = %s";
        $result = db_query($query, $user->uid);
        while ( $n = db_fetch_object($result) ) {
          $review_node = node_load($n->nid);
          if ( $review_node->field_paper[0]['nid'] == $_GET['nid'] ) {
            drupal_set_message("You have already reviewed this proposal. You may edit and update your review below.");
            drupal_goto('node/' . $review_node->nid . '/edit');
          }
        }
        $proposal_node = node_load($_GET['nid']);
        $assigned = true;
        foreach ( $proposal_node->field_proposal_reviewers as $u ) {
          if ( is_numeric($u['uid']) ) {
            $assigned = false;
          }
          if ( $u['uid'] == $user->uid ) {
            $assigned = true;
            break;
          }
        }
        if ( !$assigned ) {
          drupal_set_message("You are not assigned to review this proposal.");
          drupal_goto();
        }
      }
      
      $js = "
      $(document).ready(function() {
        $('#edit-field-paper-0-nid-nid-wrapper').hide();
        $('#content .title').text('Reviewing " . $proposal_node->title . "');
      });
      ";
      
      drupal_add_js($js, 'inline');
    break;
      
    case 'presave':     
      if ( $node->type == 'paper_review' && arg(2) != 'edit' ) {
        // Check to see if a user has already reviewed this 
        $query = "SELECT nid FROM {node} WHERE type='paper_review' AND uid = %s";
        $result = db_query($query, $user->uid);
        while ( $n = db_fetch_object($result) ) {
          $review_node = node_load($n->nid);
          if ( $review_node->field_paper[0]['nid'] == $node->field_paper[0]['nid'] ) {
            drupal_set_message("You have already reviewed this proposal. You may edit and update your review below.");
            drupal_goto('node/' . $review_node->nid . '/edit');
          }
        }
        $proposal_node = node_load($node->field_paper[0]['nid']);
        $assigned = true;
        foreach ( $proposal_node->field_proposal_reviewers as $u ) {
          if ( is_numeric($u['uid']) ) {
            $assigned = false;
          }
          if ( $u['uid'] == $user->uid ) {
            $assigned = true;
            break;
          }
        }
        if ( !$assigned ) {
          drupal_set_message("You are not assigned to review this proposal.");
          drupal_goto();
        }
      }
      else if ( $node->type == 'proposal' ) {
        // Email the reviewers
        // clear the "munged" params
        $params = array();
        //!reviewer_firstname, !reviewer_surname, !reviewer_email, !author_firstname, !author_surname, !author_email, !title, !abstract, !proposal_url, !review_url, !site, !site_url, !site_mail'
        
        $author = content_profile_load('profile', $node->uid);
        $author_user = user_load(array('uid' => $node->uid));
        $params['!author_firstname'] = $author->field_profile_firstname[0]['value'];
        $params['!author_surname'] = $author->field_profile_surname[0]['value'];
        $params['!author_email'] = $author_user->mail;
        $params['!title'] = $node->title;
        $params['!abstract'] = $node->body;
        $params['!proposal_url'] = url('node/' . $node->nid, array('absolute' => true));
        $params['!review_url'] = url('node/add/paper-review', array('absolute' => true, 'query' => array('nid' => $node->nid)));
        
        // Load in the already existing reviewers
        $new_reviewers = $node->field_proposal_reviewers;
        if ( $node->nid ) {
          $old_node = node_load($node->nid);
          $old_reviewers = $old_node->field_proposal_reviewers;
          for ( $i = 0; $i < count($old_reviewers); $i++) {
            for ( $j = 0; $j < count($new_reviewers); $j++) {
              if ( $old_node->field_proposal_reviewers[$i]['uid'] == $new_reviewers[$j]['uid'] ) {
                // no change. person was there before and is there now
                unset($old_reviewers[$i], $new_reviewers[$j]);
              }
            }
          }
          // loop through the remaining old reviewers who have not been kept on and email them about being removed
          if (variable_get('review_mail_reviewer_remove_notify_send', 0)) {
            foreach ( $old_reviewers as $reviewer ) {
              if ( $reviewer['uid'] > 0 ) {
                $reviewer_profile = content_profile_load('profile', $reviewer['uid']);
                $reviewer_user = user_load(array('uid' => $reviewer['uid']));
                $params['!reviewer_firstname'] = $reviewer_profile->field_profile_firstname[0]['value'];
                $params['!reviewer_surname'] = $reviewer_profile->field_profile_surname[0]['value'];
                $params['!reviewer_email'] = $reviewer_user->mail;
                drupal_mail('review', 'reviewer_remove_notify', $reviewer_user->mail, $language, $params);
                drupal_set_message(t('A notification of removal from reviewing has been sent to ' . $reviewer_user->mail . '.'));
              }
            }
          }
        }
        // email new reviewers
        if (variable_get('review_mail_reviewer_add_notify_send', 0)) {
          foreach ( $new_reviewers as $index => $reviewer ) {
            if ( $reviewer['uid'] > 0 ) {
              $reviewer_profile = content_profile_load('profile', $reviewer['uid']);
              $reviewer_user = user_load(array('uid' => $reviewer['uid']));
              $params['!reviewer_firstname'] = $reviewer_profile->field_profile_firstname[0]['value'];
              $params['!reviewer_surname'] = $reviewer_profile->field_profile_surname[0]['value'];
              $params['!reviewer_email'] = $reviewer_user->mail;
              drupal_mail('review', 'reviewer_add_notify', $reviewer_user->mail, $language, $params);
              drupal_set_message(t('An invite to review has been sent to ' . $reviewer_user->mail . '.'));
            }
          }
        }
      }
    break;
  }
}

/**
 * Implementation of hook_mail().
 */
function review_mail($key, &$message, $params) {

  if(empty($params['!login_url']))
     $params['!login_url'] = url('user', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!edit_url']))
     $params['!edit_url'] = url('user-profile', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site_url']))
     $params['!site_url'] = url('<front>', array('absolute' => TRUE, 'alias' => TRUE));
  if(empty($params['!site']))
     $params['!site'] = variable_get('site_name', '');
  $params['!site_name'] = $params['!site'];
  if(empty($params['!site_mail']))
     $params['!site_mail'] = variable_get('site_mail', '');

  switch ($key) {
    case 'reviewer_add_notify':
      $message['subject'] = strtr(variable_get('review_mail_reviewer_add_notify_subject'), $params);
      $message['body'][] = strtr(variable_get('review_mail_reviewer_add_notify_body'), $params);
      break;
    case 'reviewer_remove_notify':
      $message['subject'] = strtr(variable_get('review_mail_reviewer_remove_notify_subject'), $params);
      $message['body'][] = strtr(variable_get('review_mail_reviewer_remove_notify_body'), $params);
      break;
    default:
      $message['subject'] = strtr(variable_get('review_mail_'. $key .'_subject'), $params);
      $message['body'][] = strtr(variable_get('review_mail_'. $key .'_body'), $params);
  }
}
